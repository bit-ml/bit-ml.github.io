{"path":"blog/post/homomorphic-encryption-toy-implementation-in-python","templateID":2,"sharedPropsHashes":{"galleries":"ZHT1Kz"},"localProps":{"post":{"data":{"slug":"homomorphic-encryption-toy-implementation-in-python","authors":"Mădălina Bolboceanu, Miruna Roșca, Radu Țițiu","categories":"blog","featured_img":"/galleries/homomorphic2020/enigma_dec.jpg","date":"November-16-2020","title":"Homomorphic Encryption: a Toy Implementation in Python","id":4},"messages":[],"history":["./content/collections/posts/homomorphic2020.md","content/collections/posts/homomorphic2020.html"],"cwd":"/Users/fbrad/bit/bit-ml","contents":"<h1>Homomorphic Encryption: a Toy Implementation in Python</h1>\n<p><strong>Motivation:</strong>\nWe made this blog post as self-contained as possible, even though it was\ninitially thought as a follow-up of <a href=\"https://blog.openmined.org/build-an-homomorphic-encryption-scheme-from-scratch-with-python/#buildanhomomorphicencryptionscheme\">this tutorial given by\nOpenMined</a>.\nThe starting point of our Python implementation is <a href=\"https://gist.github.com/youben11/f00bc95c5dde5e11218f14f7110ad289\">this github\ngist</a>,\nwhich follows the Homomorphic Encryption scheme from\n<a href=\"https://eprint.iacr.org/2012/144.pdf\">[FV12]</a>. The motivation behind <a href=\"https://github.com/bit-ml/he-scheme\">our\nimplementation</a> was for us to understand\nin detail the two techniques of\n<a href=\"https://eprint.iacr.org/2012/144.pdf\">[FV12]</a> used for ciphertext\nmultiplication, namely <em>relinearization</em> and <em>modulus-switching</em>. This\nessential operation of ciphertext multiplication was missing in the previous\nimplementation. We thought we might share this understanding through a blog\npost as well since it may be of interest to anyone using the [FV12] scheme in\n<a href=\"https://github.com/OpenMined/TenSEAL\">TenSeal</a> or\n<a href=\"https://github.com/Microsoft/SEAL\">Seal</a> libraries.</p>\n<p><strong>Disclaimer:</strong> Our toy implementation is not meant to be secure or\noptimized for efficiency. We did it to better understand the inner workings\nof the [FV12] scheme, so you can use it as a learning tool. Our full\nimplementation can be found <a href=\"https://github.com/bit-ml/he-scheme\">here</a>.</p>\n<p><strong>Curious about how to work with data you can't see?</strong> In the first part of\nthis blog post we are going to broadly explain what Homomorphic Encryption is\nand some closely related concepts. In the second part we will follow an\nexample of such a scheme, namely the\n<a href=\"https://eprint.iacr.org/2012/144.pdf\">[FV12]</a> scheme, and discuss some of\nthe details of our implementation.</p>\n<h2>1. What is Homomorphic Encryption?</h2>\n<p>Homomorphic Encryption (HE) enables a user to perform meaningful computations\non sensitive data <strong>while ensuring the privacy of the data</strong>. This may sound\nparadoxical to anyone who has ever worked with encrypted data before: if you\nwant to perform useful computations on the encrypted data (e.g. encrypted\nunder classical algorithms like AES), you need to decrypt it first. But once\ndecryption takes place, the privacy of the data is compromised. So how is it\npossible for HE to overcome this seeming contradiction? 🔮 Well,\nthe solution is highly non-trivial, as it took the cryptographic community\nmore than 30 years to come up with a construction. The first\n<a href=\"https://www.cs.cmu.edu/~odonnell/hits09/gentry-homomorphic-encryption.pdf\">solution</a>\nwas proposed by Craig Gentry in 2009 and was of theoretical interest only.\nSince then, a lot of research has been done (e.g.\n<a href=\"https://eprint.iacr.org/2011/277\">[BGV11]</a>,\n<a href=\"https://eprint.iacr.org/2012/144\">[FV12]</a>,\n<a href=\"https://eprint.iacr.org/2016/421\">[CKKS16]</a>,\n<a href=\"https://github.com/lducas/FHEW\">[FHEW]</a>,\n<a href=\"https://tfhe.github.io/tfhe/\">[TFHE]</a>,\n<a href=\"https://eprint.iacr.org/2013/340\">[GSW13]</a>) to make these ideas more\npractical. By the end of this post you should have a basic understanding of\nhow such a construction may work.</p>\n<p>Besides the traditional encryption (<span><span><span>Enc\\mathsf{Enc}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>n</span><span>c</span></span></span></span></span></span>), decryption\n(<span><span><span>Dec\\mathsf{Dec}</span><span aria-hidden=\"true\"><span><span></span><span><span>D</span><span>e</span><span>c</span></span></span></span></span></span>) and key generation (<span><span><span>Keygen\\mathsf{Keygen}</span><span aria-hidden=\"true\"><span><span></span><span><span>K</span><span>e</span><span>y</span><span>g</span><span>e</span><span>n</span></span></span></span></span></span>) algorithms, an HE\nscheme also uses <em>an evaluation algorithm</em> (<span><span><span>Eval\\mathsf{Eval}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>v</span><span>a</span><span>l</span></span></span></span></span></span>). <strong>This is the\ndistinguishing feature that makes computations on encrypted data possible.</strong>\n💥 Let's consider the following example: Alice holds some personal\ninformation <span><span><span>xx</span><span aria-hidden=\"true\"><span><span></span><span>x</span></span></span></span></span> (e.g. her medical records and her family's medical history).\nThere is also a company that makes very good predictions based on this kind\nof information, using a refined model, expressed as the functionality <span><span><span>FF</span><span aria-hidden=\"true\"><span><span></span><span>F</span></span></span></span></span>\n(e.g. a well chosen machine learning model). On one hand, Alice is very interested in these\npredictions but is also reluctant to trust the company with her sensitive\ninformation. On the other hand, the company can't just give their model to\nAlice to make the predictions herself. A solution using Homomorphic\nEncryption is given in the picture below. Some important things to notice are:</p>\n<ul>\n<li>Alice sends her data <strong>encrypted</strong>, so the company never learns anything about <span><span><span>xx</span><span aria-hidden=\"true\"><span><span></span><span>x</span></span></span></span></span>.</li>\n<li>Computing on the encrypted data <span><span><span>CC</span><span aria-hidden=\"true\"><span><span></span><span>C</span></span></span></span></span> does <strong>not involve</strong> Alice's secret key <span><span><span>sksk</span><span aria-hidden=\"true\"><span><span></span><span>s</span><span>k</span></span></span></span></span>. Only her public key <span><span><span>pkpk</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>k</span></span></span></span></span> is used.</li>\n<li>To obtain <span><span><span>C′C'</span><span aria-hidden=\"true\"><span><span></span><span><span>C</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> as the encryption of <span><span><span>F(x)F(x)</span><span aria-hidden=\"true\"><span><span></span><span>F</span><span>(</span><span>x</span><span>)</span></span></span></span></span>, the evaluation algorithm uses the description of <span><span><span>FF</span><span aria-hidden=\"true\"><span><span></span><span>F</span></span></span></span></span> to do computations on <span><span><span>CC</span><span aria-hidden=\"true\"><span><span></span><span>C</span></span></span></span></span> (which encrypts <span><span><span>xx</span><span aria-hidden=\"true\"><span><span></span><span>x</span></span></span></span></span>).</li>\n<li>By using her secret key, <span><span><span>sksk</span><span aria-hidden=\"true\"><span><span></span><span>s</span><span>k</span></span></span></span></span>, Alice manages to recover the information that interests her, namely <span><span><span>F(x)F(x)</span><span aria-hidden=\"true\"><span><span></span><span>F</span><span>(</span><span>x</span><span>)</span></span></span></span></span>.</li>\n</ul>\n<p><img src=\"/galleries/homomorphic2020/alice.png\" alt=\"alice_overview\"></p>\n<h3>A closer look at the Eval algorithm 🔎</h3>\n<p>All the existing HE constructions are <em>homomorphic</em> with respect to two basic\noperations: some kind of <em>addition</em> and some kind of <em>multiplication</em> (e.g.\n<span><span><span>++</span><span aria-hidden=\"true\"><span><span></span><span>+</span></span></span></span></span> and <span><span><span>×\\times</span><span aria-hidden=\"true\"><span><span></span><span>×</span></span></span></span></span> over the integers or the binary operations <span><span><span>XOR\\mathsf{XOR}</span><span aria-hidden=\"true\"><span><span></span><span><span>X</span><span>O</span><span>R</span></span></span></span></span></span>\nand <span><span><span>AND\\mathsf{AND}</span><span aria-hidden=\"true\"><span><span></span><span><span>A</span><span>N</span><span>D</span></span></span></span></span></span>, etc.). What we mean is that the scheme allows the\nefficient computation of <span><span><span>caddc_{add}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> from the individual ciphertexts\n<span><span><span>c1=Enc(pk,m1)c_1=\\mathsf{Enc}(pk,m_1)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span> and <span><span><span>c2=Enc(pk,m2)c_2=\\mathsf{Enc}(pk,m_2)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span> such that the\ndecryption of <span><span><span>caddc_{add}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> yields <span><span><span>m1+m2m_1+m_2</span><span aria-hidden=\"true\"><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p><img src=\"/galleries/homomorphic2020/eval_sum.png\" alt=\"summation\"></p>\n<p>Analogously, the ciphertext <span><span><span>cmulc_{mul}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> corresponding to multiplication, that\ndecrypts to <span><span><span>m1×m2m_1\\times m_2</span><span aria-hidden=\"true\"><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, is efficiently computable from the individual\nciphertexts <span><span><span>c1=Enc(pk,m1)c_1=\\mathsf{Enc}(pk,m_1)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span> and <span><span><span>c2=Enc(pk,m2)c_2=\\mathsf{Enc}(pk,m_2)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>,\nrespectively.</p>\n<p><img src=\"/galleries/homomorphic2020/eval_mul.png\" alt=\"multiplication\"></p>\n<p>For instance:</p>\n<ul>\n<li>the <a href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\"><strong>RSA</strong></a> encryption: <span><span><span>Ence,NRSA(m):=me mod N\\mathsf{Enc}^{\\mathsf{RSA}}_{e,N}(m):=m^e \\bmod N</span><span aria-hidden=\"true\"><span><span></span><span><span><span>E</span><span>n</span><span>c</span></span><span><span><span><span><span><span></span><span><span><span>e</span><span>,</span><span>N</span></span></span></span><span><span></span><span><span><span><span>R</span><span>S</span><span>A</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>m</span><span>)</span><span></span><span>:</span></span><span><span></span><span>=</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>e</span></span></span></span></span></span></span></span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span></span><span><span></span><span>N</span></span></span></span></span>  is multiplicatively homomorphic as <span><span><span>m1e⋅m2e mod N=(m1⋅m2)e mod Nm_1^e \\cdot m_2^e \\bmod N = (m_1 \\cdot m_2)^{e} \\bmod N</span><span aria-hidden=\"true\"><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span>e</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span><span><span></span><span><span>e</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span></span><span><span></span><span>N</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>)</span><span><span><span><span><span><span></span><span><span><span>e</span></span></span></span></span></span></span></span></span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span></span><span><span></span><span>N</span></span></span></span></span></li>\n<li>the <a href=\"https://en.wikipedia.org/wiki/ElGamal_encryption\"><strong>El-Gamal</strong></a> encryption: <span><span><span>Encg,hEG(m)=(gr,hr⋅m)\\mathsf{Enc}^{\\mathsf{EG}}_{g,h}(m)=(g^r,h^r\\cdot m)</span><span aria-hidden=\"true\"><span><span></span><span><span><span>E</span><span>n</span><span>c</span></span><span><span><span><span><span><span></span><span><span><span>g</span><span>,</span><span>h</span></span></span></span><span><span></span><span><span><span><span>E</span><span>G</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>m</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span><span>g</span><span><span><span><span><span><span></span><span><span>r</span></span></span></span></span></span></span></span><span>,</span><span></span><span><span>h</span><span><span><span><span><span><span></span><span><span>r</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span>)</span></span></span></span></span>. It is easy to verify that the multiplicative property holds:</li>\n</ul>\n<p><span><span><span>(gr1,hr1⋅m1)⋅(gr2,hr2⋅m2)=(gr1+r2,hr1+r2⋅(m1⋅m2)). (g^{r_1},h^{r_1}\\cdot m_1)\\cdot (g^{r_2},h^{r_2}\\cdot m_2) =(g^{r_1+r_2},h^{r_1+r_2}\\cdot (m_1\\cdot m_2)).</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>g</span><span><span><span><span><span><span></span><span><span><span><span>r</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span>,</span><span></span><span><span>h</span><span><span><span><span><span><span></span><span><span><span><span>r</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span><span>g</span><span><span><span><span><span><span></span><span><span><span><span>r</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span>,</span><span></span><span><span>h</span><span><span><span><span><span><span></span><span><span><span><span>r</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span><span>g</span><span><span><span><span><span><span></span><span><span><span><span>r</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>+</span><span><span>r</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span>,</span><span></span><span><span>h</span><span><span><span><span><span><span></span><span><span><span><span>r</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>+</span><span><span>r</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span>)</span><span>.</span></span></span></span></span></p>\n<p>All the existing HE schemes support only two types of computations on the encrypted data: some forms of addition and multiplication. This means that the <span><span><span>Eval\\mathsf{Eval}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>v</span><span>a</span><span>l</span></span></span></span></span></span> algorithm works only for functionalities <span><span><span>FF</span><span aria-hidden=\"true\"><span><span></span><span>F</span></span></span></span></span> that can be expressed using additions (<span><span><span>++</span><span aria-hidden=\"true\"><span><span></span><span>+</span></span></span></span></span>) and multiplications (<span><span><span>×\\times</span><span aria-hidden=\"true\"><span><span></span><span>×</span></span></span></span></span>). Another way of saying this is that HE schemes support only arithmetic circuits with addition/multiplication gates. Below we can view as an arithmetic circuit the functionality <span><span><span>F(m1,m2,m3,m4)=m1×m2×m4+m3×m4F(m_1,m_2,m_3,m_4)= m_1\\times m_2\\times m_4 + m_3\\times m_4</span><span aria-hidden=\"true\"><span><span></span><span>F</span><span>(</span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p><img src=\"/galleries/homomorphic2020/arithmetic_circuit.png\" alt=\"arithmetic_circuit\"></p>\n<h3>Why focus on homomorphisms with respect to <em>two</em> operations?</h3>\n<p>In principle, any functionality can be expressed using only two basic operations. For example, any binary circuit can be obtained using <a href=\"https://en.wikipedia.org/wiki/NAND_gate\">NAND</a> gates exclusively. In turn, a NAND operation consists of one addition and one multiplication: <span><span><span>NAND(a,b)=a×b+1 mod 2\\mathsf{NAND}(a,b)=a\\times b + 1\\bmod 2</span><span aria-hidden=\"true\"><span><span></span><span><span>N</span><span>A</span><span>N</span><span>D</span></span><span>(</span><span>a</span><span>,</span><span></span><span>b</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>a</span><span></span><span>×</span><span></span></span><span><span></span><span>b</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span></span><span><span></span><span>2</span></span></span></span></span>, for any bits <span><span><span>a,b∈{0,1}a,b \\in \\{0,1\\}</span><span aria-hidden=\"true\"><span><span></span><span>a</span><span>,</span><span></span><span>b</span><span></span><span>∈</span><span></span></span><span><span></span><span>{</span><span>0</span><span>,</span><span></span><span>1</span><span>}</span></span></span></span></span>.</p>\n<p>💡 Therefore it is enough to have an HE scheme that supports an\nunlimited number of additions and multiplications to be able to make any\nefficient computation we can think of on encrypted data.</p>\n<h3>Homomorphic Encryption and \"noisy\" ciphertexts</h3>\n<p>The most practical HE constructions rely on the hardness of the <a href=\"https://en.wikipedia.org/wiki/Ring_learning_with_errors\">Ring\nLearning With Errors\n(RLWE)</a> problem for\ntheir security, as is the case with many <a href=\"https://en.wikipedia.org/wiki/Lattice-based_cryptography\">lattice-based\ncryptographic</a>\nconstructions. The inherent <strong>\"noise\"</strong> of the RLWE problem is inherited by\nall the schemes that are based on it. In particular, this \"noise\" element is\npresent in every HE ciphertext and has a great impact on the parameters of\nthe scheme.</p>\n<p><img src=\"/galleries/homomorphic2020/noisy_cyphertext.png\" alt=\"noisy_cyphertext\"></p>\n<p>The noise grows with every addition or multiplication we do on the\nciphertexts. This is very relevant as decryption stops working correctly once\nthe noise exceeds a certain threshold.</p>\n<p>Because of this phenomenon, the number of multiplications and additions that\ncan be carried out correctly on the ciphertext is limited. 💥 The\nparameters of such a scheme can be generated such that it can handle a\nminimum number of operations. But this minimum number must be decided in\nadvance to set the parameters accordingly. We usually call such a scheme\n<em>Somewhat Homomorphic Encryption</em> (SHE) scheme. When the construction allows\nan unbounded number of operations, we call such a scheme <em>Fully Homomorphic\nEncryption</em> (FHE). Even though we are not going to discuss it any further, we\nhave to mention that it's possible to obtain FHE from SHE. In fact, Gentry\n<a href=\"https://www.cs.cmu.edu/~odonnell/hits09/gentry-homomorphic-encryption.pdf\">showed</a>\nhow to transform any SHE (that can homomorphically evaluate its own\ndecryption circuit) to FHE, through a computationally expensive process\ncalled <em>bootstrapping</em>. For applications that don't require many homomorphic\nevaluations SHE is preferred, as we want to avoid the computational overhead\nof the boostrapping.</p>\n<h2>2. A SHE scheme example</h2>\n<p>For the remaining of this blog post we will try to make the concepts that we\nhave already presented more concrete, by discussing a <em>toy implementation</em> of\nthe SHE scheme construction of <a href=\"https://eprint.iacr.org/2012/144\">[FV12]</a>.\nOur main goal is to understand how <em>relinearization</em> and <em>modulus-switching</em>\nare used to obtain ciphertext multiplication.</p>\n<p><strong>Notations:</strong> For an integer <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span>, by <span><span><span>Zq\\mathbb{Z}_q</span><span aria-hidden=\"true\"><span><span></span><span><span><span>Z</span></span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> we mean the set\n<span><span><span>{0,1,…,q−1}\\{0,1,\\ldots,q-1\\}</span><span aria-hidden=\"true\"><span><span></span><span>{</span><span>0</span><span>,</span><span></span><span>1</span><span>,</span><span></span><span>…</span><span></span><span>,</span><span></span><span>q</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span><span>}</span></span></span></span></span>. We denote by <span><span><span>[a]q[a]_q</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>a</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> the remainder of <span><span><span>aa</span><span aria-hidden=\"true\"><span><span></span><span>a</span></span></span></span></span> <em>modulo</em> <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span>.\nFor example <span><span><span>[18]7=4[18]_7 = 4</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>1</span><span>8</span><span><span>]</span><span><span><span><span><span><span></span><span><span>7</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>4</span></span></span></span></span>. When rounding to the nearest integer, we use\n<span><span><span>⌊⋅⌉\\lfloor \\cdot \\rceil</span><span aria-hidden=\"true\"><span><span></span><span>⌊</span><span>⋅</span><span>⌉</span></span></span></span></span>. The basic elements we work with will not be integers,\nbut merely <em>polynomials with integer coefficients</em>. We also work with <em>noisy\npolynomials</em>, whose coefficients are sampled according to some error\ndistribution <span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span>. We bound such errors by their largest absolute value of\ntheir coefficients, denoted as <span><span><span>∥⋅∥\\|\\cdot\\|</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span></span><span>⋅</span><span></span></span><span><span></span><span>∥</span></span></span></span></span>.</p>\n<h3>Quick recap on working with polynomials</h3>\n<p>The HE scheme we are going to describe deals with <em>adding and multiplying\npolynomials</em>. Here we present a quick example of how to work with\npolynomials, so that we all have the same starting point. If you already know\nhow to do this, you can skip it.</p>\n<p>First thing, let's add and multiply polynomials <em>modulo some polynomial <span><span><span>ff</span><span aria-hidden=\"true\"><span><span></span><span>f</span></span></span></span></span></em>.\nThis \"modulo <span><span><span>ff</span><span aria-hidden=\"true\"><span><span></span><span>f</span></span></span></span></span>\" thing simply means that we add and multiply the polynomials\nin the usual way, but we take the remainders of the results when divided by\n<span><span><span>ff</span><span aria-hidden=\"true\"><span><span></span><span>f</span></span></span></span></span>. When we do these additions and multiplications <span><span><span> mod f\\bmod f</span><span aria-hidden=\"true\"><span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span>f</span></span></span></span></span>, we sometimes\nsay in a fancy way that we are working in the <em>ring</em> <span><span><span>Z[x]/(f)\\mathbb{Z}[x]/(f)</span><span aria-hidden=\"true\"><span><span></span><span><span>Z</span></span><span>[</span><span>x</span><span>]</span><span>/</span><span>(</span><span>f</span><span>)</span></span></span></span></span> of\nreduced polynomials.💍</p>\n<p>Let's take <span><span><span>f=x4+1f = x^4 +1</span><span aria-hidden=\"true\"><span><span></span><span>f</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span>. If we look at <span><span><span>p(x)=x5p(x) =x^5</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>5</span></span></span></span></span></span></span></span></span></span></span></span>,\nthen <span><span><span>p(x)=x⋅(x4+1)−xp(x) = x \\cdot (x^4 + 1) - x</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>x</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span></span><span>−</span><span></span></span><span><span></span><span>x</span></span></span></span></span>. Therefore, when taking the reminder we get\n<span><span><span>p(x)=−x mod fp(x) = -x \\bmod f</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>−</span><span>x</span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span></span><span><span></span><span>f</span></span></span></span></span>. For faster computations <span><span><span> mod f\\bmod f</span><span aria-hidden=\"true\"><span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span>f</span></span></span></span></span> you can use this trick:\nwhen making <span><span><span> mod f\\bmod f</span><span aria-hidden=\"true\"><span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span>f</span></span></span></span></span>, simply replace <span><span><span>x4x^4</span><span aria-hidden=\"true\"><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span></span></span></span></span> by <span><span><span>−1-1</span><span aria-hidden=\"true\"><span><span></span><span>−</span><span>1</span></span></span></span></span>, <span><span><span>x5x^5</span><span aria-hidden=\"true\"><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>5</span></span></span></span></span></span></span></span></span></span></span></span> by <span><span><span>−x-x</span><span aria-hidden=\"true\"><span><span></span><span>−</span><span>x</span></span></span></span></span> and so on.</p>\n<p>Let's consider two polynomials <span><span><span>a(x)=x3+x2+7a(x) = x^3 + x^2 + 7</span><span aria-hidden=\"true\"><span><span></span><span>a</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>7</span></span></span></span></span> and <span><span><span>b(x)=x2+11xb(x) = x^2 + 11x</span><span aria-hidden=\"true\"><span><span></span><span>b</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>1</span><span>x</span></span></span></span></span>.\nThen:</p>\n<div><span><span><span>a(x)+b(x) mod f=x3+2x2+11x+7 mod f.a(x)+b(x) \\bmod f = x^3 + 2x^2 + 11x + 7 \\text { mod }f.</span><span aria-hidden=\"true\"><span><span></span><span>a</span><span>(</span><span>x</span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>b</span><span>(</span><span>x</span><span>)</span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span></span><span><span></span><span>f</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>2</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>1</span><span>x</span><span></span><span>+</span><span></span></span><span><span></span><span>7</span><span><span> mod </span></span><span>f</span><span>.</span></span></span></span></span></div>\n<p>Here nothing special happened. Let's multiply them:</p>\n<div><span><span><span>a(x)⋅b(x) mod f=(x3+x2+7)⋅(x2+11x) mod f=x5+11x4+x4+11x3+7x2+77x mod f=−x−11−1+11x3+7x2+77x mod f=11x3+7x2+76x−12 mod f.\\begin{aligned}\na(x) \\cdot b(x) \\bmod f\n    &#x26;= (x^3 + x^2 + 7)\\cdot (x^2 +11x) \\text { mod }f \\\\\n    &#x26;= x^5 + 11x^4 + x^4 + 11x^3 + 7x^2 + 77x \\text { mod }f\\\\\n    &#x26;= -x - 11 - 1 + 11x^3 + 7x^2 + 77x \\text { mod }f \\\\\n    &#x26;= 11x^3 + 7x^2 + 76x - 12 \\text { mod }f.\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span>a</span><span>(</span><span>x</span><span>)</span><span></span><span>⋅</span><span></span><span>b</span><span>(</span><span>x</span><span>)</span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span></span><span>f</span></span></span><span><span></span><span></span></span><span><span></span><span></span></span><span><span></span><span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span><span><span><span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span>)</span><span></span><span>⋅</span><span></span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>1</span><span>1</span><span>x</span><span>)</span><span><span> mod </span></span><span>f</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>5</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>1</span><span>1</span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>1</span><span>1</span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span>7</span><span>x</span><span><span> mod </span></span><span>f</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>−</span><span>x</span><span></span><span>−</span><span></span><span>1</span><span>1</span><span></span><span>−</span><span></span><span>1</span><span></span><span>+</span><span></span><span>1</span><span>1</span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span>7</span><span>x</span><span><span> mod </span></span><span>f</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>1</span><span>1</span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>7</span><span>6</span><span>x</span><span></span><span>−</span><span></span><span>1</span><span>2</span><span><span> mod </span></span><span>f</span><span>.</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>These operations are implemented\n<a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L7\">here</a>\nand make use of the cool\n<a href=\"https://numpy.org/doc/stable/reference/routines.polynomials.html\">Numpy</a>\nlibrary:</p>\n<div><pre><code><span>import</span><span> </span>numpy<span> </span><span>as</span><span> </span>np<span></span>\n<span></span><span>from</span><span> </span>numpy<span>.</span>polynomial<span> </span><span>import</span><span> </span>polynomial<span> </span><span>as</span><span> </span>poly<span></span>\n<span></span><span></span>\n<span></span><span>#------Functions<span> </span>for<span> </span>polynomial<span> </span>evaluations<span> </span>mod<span> </span>poly_mod<span> </span>only------</span><span></span>\n<span></span><span>def</span><span> </span><span>polymul_wm</span><span>(</span>x<span>,</span><span> </span>y<span>,</span><span> </span>poly_mod<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Multiply<span> </span>two<span> </span>polynomials<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>x,<span> </span>y:<span> </span>two<span> </span>polynomials<span> </span>to<span> </span>be<span> </span>multiplied.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>A<span> </span>polynomial<span> </span>in<span> </span>Z[X]/(poly_mod).<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span>poly<span>.</span>polydiv<span>(</span>poly<span>.</span>polymul<span>(</span>x<span>,</span><span> </span>y<span>)</span><span>,</span><span> </span>poly_mod<span>)</span><span>[</span><span>1</span><span>]</span><span> </span><span></span>\n<span></span><span>def</span><span> </span><span>polyadd_wm</span><span>(</span>x<span>,</span><span> </span>y<span>,</span><span> </span>poly_mod<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Add<span> </span>two<span> </span>polynomials<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>x,<span> </span>y:<span> </span>two<span> </span>polynomials<span> </span>to<span> </span>be<span> </span>added.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>A<span> </span>polynomial<span> </span>in<span> </span>Z[X]/(poly_mod).<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span>poly<span>.</span>polydiv<span>(</span>poly<span>.</span>polyadd<span>(</span>x<span>,</span><span> </span>y<span>)</span><span>,</span><span> </span>poly_mod<span>)</span><span>[</span><span>1</span><span>]</span><span> </span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>Now let's go one step further and see how we perform these operations of\npolynomials not just modulo <span><span><span>ff</span><span aria-hidden=\"true\"><span><span></span><span>f</span></span></span></span></span>, <em>but also modulo some integer <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span></em>. As you\nmight expect, the coefficients of these polynomials are also reduced modulo\n<span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span>, so they always take integer values from <span><span><span>00</span><span aria-hidden=\"true\"><span><span></span><span>0</span></span></span></span></span> to <span><span><span>q−1.q-1.</span><span aria-hidden=\"true\"><span><span></span><span>q</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span><span>.</span></span></span></span></span> This time, we say\nthat we are working the ring of reduced polynomials <span><span><span>Zq[x]/(f)\\mathbb{Z}_q[x]/(f)</span><span aria-hidden=\"true\"><span><span></span><span><span><span>Z</span></span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>x</span><span>]</span><span>/</span><span>(</span><span>f</span><span>)</span></span></span></span></span>.\n💍</p>\n<p>Let's take the previous example, <span><span><span>f=x4+1f = x^4+1</span><span aria-hidden=\"true\"><span><span></span><span>f</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span>, <span><span><span>a(x)=x3+x2+7a(x)=x^3+x^2+7</span><span aria-hidden=\"true\"><span><span></span><span>a</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>7</span></span></span></span></span>,\n<span><span><span>b(x)=x2+11xb(x)=x^2+11x</span><span aria-hidden=\"true\"><span><span></span><span>b</span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>1</span><span>x</span></span></span></span></span> and consider <span><span><span>q=5q =5</span><span aria-hidden=\"true\"><span><span></span><span>q</span><span></span><span>=</span><span></span></span><span><span></span><span>5</span></span></span></span></span>. We can think of <span><span><span>aa</span><span aria-hidden=\"true\"><span><span></span><span>a</span></span></span></span></span> and <span><span><span>bb</span><span aria-hidden=\"true\"><span><span></span><span>b</span></span></span></span></span> as already\ntaken <span><span><span> mod f\\bmod f</span><span aria-hidden=\"true\"><span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span>f</span></span></span></span></span>. If we take them further modulo <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span>, then <span><span><span>[a(x)]q=x3+x2+2[a(x)]_q = x^3 +\nx^2 +2</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>a</span><span>(</span><span>x</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>2</span></span></span></span></span> and <span><span><span>[b(x)]q=x2+x[b(x)]_q = x^2+x</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>b</span><span>(</span><span>x</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>x</span></span></span></span></span>. Moreover,</p>\n<div><span><span><span>[a(x)+b(x)]q=x3+x2+2+x2+x=x3+2x2+x+2[a(x) + b(x)]_q = x^3 + x^2 +2+ x^2 + x = x^3 + 2x^2 + x+2</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>a</span><span>(</span><span>x</span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>b</span><span>(</span><span>x</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>2</span><span></span><span>+</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>x</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>2</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>x</span><span></span><span>+</span><span></span></span><span><span></span><span>2</span></span></span></span></span></div>\n<p>and</p>\n<div><span><span><span>[a(x)⋅b(x)]q=(x3+x2+2)⋅(x2+x)=x5+x4+x4+x3+2x2+2x=−x−1−1+x3+2x2+2x=x3+2x2+x+3\\begin{aligned}\n[a(x) \\cdot b(x)]_q\n    &#x26;= (x^3 + x^2+2) \\cdot (x^2 + x)\\\\\n    &#x26;= x^5 + x^4 + x^4 +x^3+2x^2 + 2x\\\\\n    &#x26;= -x -1 -1 + x^3 +2x^2+2x\\\\\n    &#x26;= x^3+2x^2+x+3\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span>[</span><span>a</span><span>(</span><span>x</span><span>)</span><span></span><span>⋅</span><span></span><span>b</span><span>(</span><span>x</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span><span><span></span><span></span></span><span><span></span><span></span></span><span><span></span><span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span><span><span><span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>2</span><span>)</span><span></span><span>⋅</span><span></span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>x</span><span>)</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>5</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>2</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>2</span><span>x</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>−</span><span>x</span><span></span><span>−</span><span></span><span>1</span><span></span><span>−</span><span></span><span>1</span><span></span><span>+</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>2</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>2</span><span>x</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>2</span><span><span>x</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>x</span><span></span><span>+</span><span></span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>where at the last but one equality we performed modulo <span><span><span>f=x4+1f = x^4+1</span><span aria-hidden=\"true\"><span><span></span><span>f</span><span></span><span>=</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>4</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span> and at the last one, modulo <span><span><span>q=5q=5</span><span aria-hidden=\"true\"><span><span></span><span>q</span><span></span><span>=</span><span></span></span><span><span></span><span>5</span></span></span></span></span>.</p>\n<p>These operations already mentioned are <span><span><span>polyadd\\texttt{polyadd}</span><span aria-hidden=\"true\"><span><span></span><span><span>polyadd</span></span></span></span></span></span> and\n<span><span><span>polymul\\texttt{polymul}</span><span aria-hidden=\"true\"><span><span></span><span><span>polymul</span></span></span></span></span></span> implemented\n<a href=\"https://github.com/Bitdefender-Crypto-Team/he-scheme/blob/main/rlwe_he_scheme_updated.py\">here</a>.</p>\n<h3>The Fan-Vercauteren ([FV12]) scheme</h3>\n<p>Next, we recall the basic (<span><span><span>Keygen\\mathsf{Keygen}</span><span aria-hidden=\"true\"><span><span></span><span><span>K</span><span>e</span><span>y</span><span>g</span><span>e</span><span>n</span></span></span></span></span></span>, <span><span><span>Enc\\mathsf{Enc}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>n</span><span>c</span></span></span></span></span></span>, <span><span><span>Dec\\mathsf{Dec}</span><span aria-hidden=\"true\"><span><span></span><span><span>D</span><span>e</span><span>c</span></span></span></span></span></span>)\nalgorithms of <a href=\"https://eprint.iacr.org/2012/144.pdf\"><strong>the [FV12] scheme</strong></a>.\nThese (almost identical) algorithms have already been described\n<a href=\"https://blog.openmined.org/build-an-homomorphic-encryption-scheme-from-scratch-with-python/#buildanhomomorphicencryptionscheme\">here</a>,\nbut for the sake of completeness, we present them as well. Then we will\nexplain in detail the core of the <span><span><span>Eval\\mathsf{Eval}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>v</span><span>a</span><span>l</span></span></span></span></span></span> algorithm: the addition and\nmultiplication of the ciphertexts. <em>Spoiler alert</em>: We will primarily focus\non the two <em>Relinearization</em> techniques that enable ciphertext\nmultiplication.</p>\n<p>Let <span><span><span>nn</span><span aria-hidden=\"true\"><span><span></span><span>n</span></span></span></span></span> be power of 2. We call a positive integer <span><span><span>tt</span><span aria-hidden=\"true\"><span><span></span><span>t</span></span></span></span></span> the <em>plaintext\nmodulus</em> and a positive integer <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span> as the <em>ciphertext modulus</em>. We set\n<span><span><span>Δ=⌊q/t⌋\\Delta = \\lfloor q/t \\rfloor</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span><span></span><span>=</span><span></span></span><span><span></span><span>⌊</span><span>q</span><span>/</span><span>t</span><span>⌋</span></span></span></span></span>. The scheme involves adding and multiplying\npolynomials in <span><span><span>Rt=Zt[x]/(xn+1)R_t = \\mathbb{Z}_t[x]/(x^n+1)</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span>Z</span></span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>x</span><span>]</span><span>/</span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span></span></span></span></span>, on the plaintext side, and\nadding and multiplying polynomials in <span><span><span>Rq=Zq[x]/(xn+1)R_q = \\mathbb{Z}_q[x]/(x^n+1)</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span>Z</span></span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>x</span><span>]</span><span>/</span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span></span></span></span></span>, on the\nciphertext side. We also denote by <span><span><span>RR</span><span aria-hidden=\"true\"><span><span></span><span>R</span></span></span></span></span> the ring <span><span><span>Z[x]/(xn+1).\\mathbb{Z}[x]/(x^n+1).</span><span aria-hidden=\"true\"><span><span></span><span><span>Z</span></span><span>[</span><span>x</span><span>]</span><span>/</span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span>.</span></span></span></span></span></p>\n<p><strong>Disclaimer</strong>: From now on all polynomial operations are\nassumed to be mod <span><span><span>xn+1x^n+1</span><span aria-hidden=\"true\"><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span>, even if we don't mention it every time.</p>\n<p>Here is the <strong>high level of the scheme</strong>:</p>\n<p><img src=\"/galleries/homomorphic2020/he_scheme5.png\" alt=\"he_scheme5\"></p>\n<p>➡️ <span><span><span>Keygen\\mathsf{Keygen}</span><span aria-hidden=\"true\"><span><span></span><span><span>K</span><span>e</span><span>y</span><span>g</span><span>e</span><span>n</span></span></span></span></span></span>: The <em>secret key</em> <span><span><span>sksk</span><span aria-hidden=\"true\"><span><span></span><span>s</span><span>k</span></span></span></span></span> is a secret binary polynomial <span><span><span>ss</span><span aria-hidden=\"true\"><span><span></span><span>s</span></span></span></span></span> in <span><span><span>RR</span><span aria-hidden=\"true\"><span><span></span><span>R</span></span></span></span></span>, i.e. its coefficients are either 0 or 1. The <em>public key</em> <span><span><span>pkpk</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>k</span></span></span></span></span> is created as follows: we sample <span><span><span>aa</span><span aria-hidden=\"true\"><span><span></span><span>a</span></span></span></span></span> uniformly over <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> and an error <span><span><span>ee</span><span aria-hidden=\"true\"><span><span></span><span>e</span></span></span></span></span> according to some error distribution <span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span> over <span><span><span>RR</span><span aria-hidden=\"true\"><span><span></span><span>R</span></span></span></span></span> and output <span><span><span>pk=([−(a⋅s+e)]q,a)∈Rq×Rqpk = ([-(a\\cdot s+e)]_q,a) \\in R_q \\times R_q</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>k</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>[</span><span>−</span><span>(</span><span>a</span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span>e</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>a</span><span>)</span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Notice that hardness of the\n<a href=\"https://en.wikipedia.org/wiki/Ring_learning_with_errors#The_RLWE_Problem\">RLWE</a>\nproblem prevents the computation of the secret <span><span><span>ss</span><span aria-hidden=\"true\"><span><span></span><span>s</span></span></span></span></span> from the public key.</p>\n<p>The way we generate the uniform polynomials and the binary polynomials is\nimplemented as <span><span><span>gen_uniform_poly\\texttt{gen\\_uniform\\_poly}</span><span aria-hidden=\"true\"><span><span></span><span><span>gen_uniform_poly</span></span></span></span></span></span> and as\n<span><span><span>gen_binary_poly\\texttt{gen\\_binary\\_poly}</span><span aria-hidden=\"true\"><span><span></span><span><span>gen_binary_poly</span></span></span></span></span></span> respectively. The error distribution <span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span> is\nusually taken as a discretized variant of the\n<a href=\"https://en.wikipedia.org/wiki/Normal_distribution\"><em>Normal distribution</em></a>, over\n<span><span><span>Zn\\mathbb{Z}^n</span><span aria-hidden=\"true\"><span><span></span><span><span><span>Z</span></span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span></span>, and is implemented as <span><span><span>gen_normal_poly\\texttt{gen\\_normal\\_poly}</span><span aria-hidden=\"true\"><span><span></span><span><span>gen_normal_poly</span></span></span></span></span></span>.\nThey can be found\n<a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L118\">here</a>.</p>\n<div><pre><code><span>def</span><span> </span><span>keygen</span><span>(</span>size<span>,</span><span> </span>modulus<span>,</span><span> </span>poly_mod<span>,</span><span> </span>std1<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Generate<span> </span>a<span> </span>public<span> </span>and<span> </span>secret<span> </span>keys.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>size:<span> </span>size<span> </span>of<span> </span>the<span> </span>polynoms<span> </span>for<span> </span>the<span> </span>public<span> </span>and<span> </span>secret<span> </span>keys.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>modulus:<span> </span>coefficient<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>std1:<span> </span>standard<span> </span>deviation<span> </span>of<span> </span>the<span> </span>error.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Public<span> </span>and<span> </span>secret<span> </span>key.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>s<span> </span><span>=</span><span> </span>gen_binary_poly<span>(</span>size<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>a<span> </span><span>=</span><span> </span>gen_uniform_poly<span>(</span>size<span>,</span><span> </span>modulus<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>e<span> </span><span>=</span><span> </span>gen_normal_poly<span>(</span>size<span>,</span><span> </span><span>0</span><span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>b<span> </span><span>=</span><span> </span>polyadd<span>(</span>polymul<span>(</span><span>-</span>a<span>,</span><span> </span>s<span>,</span><span> </span>modulus<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span><span>-</span>e<span>,</span><span> </span>modulus<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>(</span>b<span>,</span><span> </span>a<span>)</span><span>,</span><span> </span>s<span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>➡️ <span><span><span>Enc\\mathsf{Enc}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>n</span><span>c</span></span></span></span></span></span>: To encrypt a <em>plaintext</em> <span><span><span>m∈Rtm \\in R_t</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, we let <span><span><span>pk=(pk0,pk1)pk = (pk_0, pk_1)</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>k</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>, sample <span><span><span>u,e1,e2u, e_1, e_2</span><span aria-hidden=\"true\"><span><span></span><span>u</span><span>,</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> according to <span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span> over <span><span><span>RR</span><span aria-hidden=\"true\"><span><span></span><span>R</span></span></span></span></span> and output the <em>ciphertext</em></p>\n<div><span><span><span>Enc(pk,m)=([pk0⋅u+e1+Δ⋅m]q,[pk1⋅u+e2]q)∈Rq×Rq\\mathsf{Enc}(pk,m) = ([pk_0 \\cdot u +e_1 + \\Delta \\cdot m]_q,[pk_1 \\cdot u + e_2]_q) \\in R_q \\times R_q</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span>m</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>[</span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>u</span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>[</span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>u</span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></div>\n<p>Due to the <a href=\"https://en.wikipedia.org/wiki/Ring_learning_with_errors#The_RLWE_Problem\">RLWE</a> assumption, the ciphertexts \"look\" uniformly random to a possible attacker, so they don't reveal any information about the plaintext.</p>\n<p>In the piece of <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L188\">code</a> below, the message we want to encrypt, <span><span><span>mm</span><span aria-hidden=\"true\"><span><span></span><span>m</span></span></span></span></span>, is an integer vector of length at most <span><span><span>nn</span><span aria-hidden=\"true\"><span><span></span><span>n</span></span></span></span></span>, with entries in the set <span><span><span>{0,1,…,t−1}\\{0, 1,\\ldots, t-1\\}</span><span aria-hidden=\"true\"><span><span></span><span>{</span><span>0</span><span>,</span><span></span><span>1</span><span>,</span><span></span><span>…</span><span></span><span>,</span><span></span><span>t</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span><span>}</span></span></span></span></span>. Before we encode it as a polynomial in <span><span><span>m∈Rtm \\in R_t</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, we pad it with enough zeros to make it a length <span><span><span>nn</span><span aria-hidden=\"true\"><span><span></span><span>n</span></span></span></span></span> vector.</p>\n<div><pre><code><span>def</span><span> </span><span>encrypt</span><span>(</span>pk<span>,</span><span> </span>size<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>m<span>,</span><span> </span>std1<span>)</span><span>:</span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Encrypt<span> </span>an<span> </span>integer<span> </span>vector<span> </span>pt.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>pk:<span> </span>public-key.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>size:<span> </span>size<span> </span>of<span> </span>polynomials.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>q:<span> </span>ciphertext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>t:<span> </span>plaintext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>m:<span> </span>plaintext<span> </span>message,<span> </span>as<span> </span>an<span> </span>integer<span> </span>vector<span> </span>(of<span> </span>length<span> </span>&#x3C;=<span> </span>size)<span> </span>with<span> </span>entries<span> </span>mod<span> </span>t.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Tuple<span> </span>representing<span> </span>a<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>m<span> </span><span>=</span><span> </span>np<span>.</span>array<span>(</span>m<span> </span><span>+</span><span> </span><span>[</span><span>0</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span>size<span> </span><span>-</span><span> </span><span>len</span><span>(</span>m<span>)</span><span>)</span><span>,</span><span> </span>dtype<span>=</span>np<span>.</span>int64<span>)</span><span> </span><span>%</span><span> </span>t<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>delta<span> </span><span>=</span><span> </span>q<span> </span><span>//</span><span> </span>t<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>scaled_m<span> </span><span>=</span><span> </span>delta<span> </span><span>*</span><span> </span>m<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>e1<span> </span><span>=</span><span> </span>gen_normal_poly<span>(</span>size<span>,</span><span> </span><span>0</span><span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>e2<span> </span><span>=</span><span> </span>gen_normal_poly<span>(</span>size<span>,</span><span> </span><span>0</span><span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>u<span> </span><span>=</span><span> </span>gen_binary_poly<span>(</span>size<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct0<span> </span><span>=</span><span> </span>polyadd<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polyadd<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polymul<span>(</span>pk<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>u<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>e1<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>scaled_m<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct1<span> </span><span>=</span><span> </span>polyadd<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polymul<span>(</span>pk<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>u<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>e2<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>(</span>ct0<span>,</span><span> </span>ct1<span>)</span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>➡️ <span><span><span>Dec\\mathsf{Dec}</span><span aria-hidden=\"true\"><span><span></span><span><span>D</span><span>e</span><span>c</span></span></span></span></span></span>: Given a ciphertext <span><span><span>ct=Enc(pk,m)=(ct0,ct1)ct = \\mathsf{Enc}(pk,m)=(ct_0, ct_1)</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span>m</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>, we decrypt it using the secret key <span><span><span>sk=ssk=s</span><span aria-hidden=\"true\"><span><span></span><span>s</span><span>k</span><span></span><span>=</span><span></span></span><span><span></span><span>s</span></span></span></span></span> as follows:</p>\n<div><span><span><span>Dec(sk,ct)=[⌊t⋅[ct0+ct1⋅s]qq⌉]t∈Rt\\mathsf{Dec}(sk,ct) = \\Bigg[ \\Bigg\\lfloor \\frac{t\\cdot [ct_0+ct_1\\cdot s]_q}{q} \\Bigg\\rceil \\Bigg]_t \\in R_t</span><span aria-hidden=\"true\"><span><span></span><span><span>D</span><span>e</span><span>c</span></span><span>(</span><span>s</span><span>k</span><span>,</span><span></span><span>c</span><span>t</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>[</span></span><span><span>⌊</span></span><span><span></span><span><span><span><span><span><span></span><span><span>q</span></span></span><span><span></span><span></span></span><span><span></span><span><span>t</span><span></span><span>⋅</span><span></span><span>[</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span><span>⌉</span></span><span><span><span>]</span></span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></div>\n<p>⛔ Let's stop for a bit and check together how the <span><span><span>Dec\\mathsf{Dec}</span><span aria-hidden=\"true\"><span><span></span><span><span>D</span><span>e</span><span>c</span></span></span></span></span></span> algorithm works. The intuition behind it is that <span><span><span>pk0+pk1⋅skpk_0 + pk_1\\cdot sk</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span>k</span></span></span></span></span> is \"small\". This implies that <span><span><span>ct0+ct1⋅skct_0 + ct_1\\cdot sk</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span>k</span></span></span></span></span> is \"close\" to the scaled message <span><span><span>Δ⋅m\\Delta \\cdot m</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span></span></span></span></span>. To recover the message <span><span><span>mm</span><span aria-hidden=\"true\"><span><span></span><span>m</span></span></span></span></span>, we get rid of <span><span><span>Δ\\Delta</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span></span></span></span></span> <span><span><span>(≈q/t)(\\approx q/t)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>≈</span><span></span></span><span><span></span><span>q</span><span>/</span><span>t</span><span>)</span></span></span></span></span> and then apply rounding to shave off the \"small\" noise. Let's check that this intuition actually works.</p>\n<p>First, we set the notation <span><span><span>ct(s):=ct0+ct1⋅sct(s) := ct_0 + ct_1 \\cdot s</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span></span><span>:</span></span><span><span></span><span>=</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span></span></span></span></span>, which we'll frequently use for the rest of the post. If we perform this computation, we will end up getting <em>a noisy scaled variant of the plaintext</em>, namely <span><span><span>Δ⋅m+v\\Delta \\cdot m+v</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span>v</span></span></span></span></span>!</p>\n<p>If we go back to see how <span><span><span>ctct</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span></span></span></span></span> and <span><span><span>pkpk</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span>k</span></span></span></span></span> were defined, we get:</p>\n<div><span><span><span>[ct(s)]q=[(pk0⋅u+e1+Δ⋅m)+(pk1⋅u+e2)⋅s]q=[−(a⋅s+e)⋅u+e1+Δ⋅m+a⋅u⋅s+e2⋅s]q=Δ⋅m−e⋅u+e1+e2⋅s=Δ⋅m+v,\\begin{aligned}\n[ct(s)]_q &#x26;= [(pk_0 \\cdot u + e_1 + \\Delta \\cdot m) + (pk_1 \\cdot u + e_2) \\cdot s]_q\\\\\n    &#x26;= [-(a\\cdot s + e)\\cdot u+e_1 + \\Delta \\cdot m + a \\cdot u \\cdot s + e_2 \\cdot s]_q\\\\\n    &#x26;= \\Delta \\cdot m - e \\cdot u + e_1 + e_2 \\cdot s\\\\\n    &#x26;= \\Delta \\cdot m + v,\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span>[</span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span><span><span></span><span></span></span><span><span></span><span></span></span><span><span></span><span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span><span><span><span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>[</span><span>(</span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>u</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>m</span><span>)</span><span></span><span>+</span><span></span><span>(</span><span>p</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>u</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>⋅</span><span></span><span>s</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>[</span><span>−</span><span>(</span><span>a</span><span></span><span>⋅</span><span></span><span>s</span><span></span><span>+</span><span></span><span>e</span><span>)</span><span></span><span>⋅</span><span></span><span>u</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>m</span><span></span><span>+</span><span></span><span>a</span><span></span><span>⋅</span><span></span><span>u</span><span></span><span>⋅</span><span></span><span>s</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>m</span><span></span><span>−</span><span></span><span>e</span><span></span><span>⋅</span><span></span><span>u</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>m</span><span></span><span>+</span><span></span><span>v</span><span>,</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>which is nothing but the scaled plaintext <span><span><span>mm</span><span aria-hidden=\"true\"><span><span></span><span>m</span></span></span></span></span> with some <em>\"small\" noise</em> <span><span><span>vv</span><span aria-hidden=\"true\"><span><span></span><span>v</span></span></span></span></span>.</p>\n<p>Because we always have <span><span><span>∥Δ⋅m+v∥&#x3C;q\\|\\Delta\\cdot m + v\\| &#x3C; q</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span>v</span><span>∥</span><span></span><span>&#x3C;</span><span></span></span><span><span></span><span>q</span></span></span></span></span>, reducing it <span><span><span> mod q\\bmod q</span><span aria-hidden=\"true\"><span><span></span><span></span><span><span><span>m</span><span>o</span><span>d</span></span></span><span></span><span>q</span></span></span></span></span> has no effect (e.g. <span><span><span>[4]7=4[4]_{7} = 4</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>4</span><span><span>]</span><span><span><span><span><span><span></span><span><span><span>7</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>4</span></span></span></span></span>). As long as the noise <span><span><span>∥v∥&#x3C;Δ/2\\|v\\|&#x3C;\\Delta/2</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span>v</span><span>∥</span><span></span><span>&#x3C;</span><span></span></span><span><span></span><span>Δ</span><span>/</span><span>2</span></span></span></span></span>, we can always recover the correct <span><span><span>mm</span><span aria-hidden=\"true\"><span><span></span><span>m</span></span></span></span></span>.</p>\n<p><img src=\"/galleries/homomorphic2020/dec_details.png\" alt=\"decoder_details\"></p>\n<p>For example, in the picture above, any green point will decrypt to <span><span><span>22</span><span aria-hidden=\"true\"><span><span></span><span>2</span></span></span></span></span> when we scale it by <span><span><span>t/qt/q</span><span aria-hidden=\"true\"><span><span></span><span>t</span><span>/</span><span>q</span></span></span></span></span> <span><span><span>(≈1/Δ)(\\approx 1/\\Delta)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>≈</span><span></span></span><span><span></span><span>1</span><span>/</span><span>Δ</span><span>)</span></span></span></span></span> and round it. Analogously, any dark-brown point will decrypt to <span><span><span>33</span><span aria-hidden=\"true\"><span><span></span><span>3</span></span></span></span></span>.</p>\n<p>We can implement this evaluation, as <span><span><span>scaled_pt\\texttt{scaled\\_pt}</span><span aria-hidden=\"true\"><span><span></span><span><span>scaled_pt</span></span></span></span></span></span> below, by performing polynomial operations in <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>. You will see that this equation,</p>\n<div><span><span><span>[ct(s)]q=[ct0+ct1⋅s]q=Δ⋅m+v,[ct(s)]_q = [ct_0 + ct_1 \\cdot s]_q = \\Delta \\cdot m + v,</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>[</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span>v</span><span>,</span></span></span></span></span></div>\n<p>which we will call <em>the decryption equation</em>, becomes really useful in deriving ways of computing on ciphertexts. Here we provide the <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L219\">code</a> for the <span><span><span>Dec\\mathsf{Dec}</span><span aria-hidden=\"true\"><span><span></span><span><span>D</span><span>e</span><span>c</span></span></span></span></span></span> algorithm:</p>\n<div><pre><code><span>def</span><span> </span><span>decrypt</span><span>(</span>sk<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>ct<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Decrypt<span> </span>a<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>sk:<span> </span>secret-key.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>size:<span> </span>size<span> </span>of<span> </span>polynomials.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>q:<span> </span>ciphertext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>t:<span> </span>plaintext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct:<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Integer<span> </span>vector<span> </span>representing<span> </span>the<span> </span>plaintext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>scaled_pt<span> </span><span>=</span><span> </span>polyadd<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polymul<span>(</span>ct<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>sk<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>decrypted_poly<span> </span><span>=</span><span> </span>np<span>.</span><span>round</span><span>(</span>t<span> </span><span>*</span><span> </span>scaled_pt<span> </span><span>/</span><span> </span>q<span>)</span><span> </span><span>%</span><span> </span>t<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span>np<span>.</span>int64<span>(</span>decrypted_poly<span>)</span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<h3>Homomorphic operations of [FV12]</h3>\n<p>As explained in the first part, the <span><span><span>Eval\\mathsf{Eval}</span><span aria-hidden=\"true\"><span><span></span><span><span>E</span><span>v</span><span>a</span><span>l</span></span></span></span></span></span> algorithm works only for functionalities that can be expressed using addition <span><span><span>(+)(+)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>+</span><span>)</span></span></span></span></span> or multiplication <span><span><span>(×)(\\times)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>×</span><span>)</span></span></span></span></span>.</p>\n<p>Let's take two ciphertexts <span><span><span>ct=Enc(pk,m)ct = \\mathsf{Enc}(pk,m)</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span>m</span><span>)</span></span></span></span></span> and <span><span><span>ct′=Enc(pk,m′)ct' = \\mathsf{Enc}(pk,m')</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>E</span><span>n</span><span>c</span></span><span>(</span><span>p</span><span>k</span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></span>. We want to see how to construct ciphertexts that decrypt both the addition, <span><span><span>m+m′m+m'</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span>, and the multiplication, <span><span><span>m⋅m′m\\cdot m'</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span>. Also, keep in mind that when performing operations on <span><span><span>mm</span><span aria-hidden=\"true\"><span><span></span><span>m</span></span></span></span></span> and <span><span><span>m′m'</span><span aria-hidden=\"true\"><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span>, we are actually doing them <em>modulo <span><span><span>xn+1x^n+1</span><span aria-hidden=\"true\"><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span></em> and <em>modulo <span><span><span>tt</span><span aria-hidden=\"true\"><span><span></span><span>t</span></span></span></span></span></em>, since these are the plaintext operations from <span><span><span>Rt=Zt[x]/(xn+1)R_t = \\mathbb{Z}_t[x]/(x^n+1)</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span>Z</span></span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>x</span><span>]</span><span>/</span><span>(</span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span></span></span></span></span>.</p>\n<p>Let's write the decryption equations of <span><span><span>ctct</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span></span></span></span></span> and <span><span><span>ct′ct'</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span>:</p>\n<div><span><span><span>[ct(s)]q=Δ⋅m+v and [ct′(s)]q=Δ⋅m′+v′.[ct(s)]_q = \\Delta \\cdot m + v \\text{ and } [ct'(s)]_q = \\Delta \\cdot m' + v'.</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span>v</span><span><span> and </span></span><span>[</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>➡️ <strong>Addition:</strong> If we simply add the decryption equations, we get</p>\n<div><span><span><span>[ct(s)]q+[ct′(s)]q=Δ⋅(m+m′)+v+v′.[ct(s)]_q + [ct'(s)]_q = \\Delta \\cdot (m+m') + v  + v'.</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>[</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>v</span><span></span><span>+</span><span></span></span><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>But wait a sec, we need to decrypt to <span><span><span>m1+m2m_1+m_2</span><span aria-hidden=\"true\"><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> modulo <span><span><span>tt</span><span aria-hidden=\"true\"><span><span></span><span>t</span></span></span></span></span>! Notice that <span><span><span>m+m′=t⋅ϵ+[m+m′]tm + m' = t \\cdot \\epsilon + [m+m']_t</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>t</span><span></span><span>⋅</span><span></span></span><span><span></span><span>ϵ</span><span></span><span>+</span><span></span></span><span><span></span><span>[</span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, for some binary polynomial <span><span><span>ϵ\\epsilon</span><span aria-hidden=\"true\"><span><span></span><span>ϵ</span></span></span></span></span>. Using the notation <span><span><span>rt(q):=q−Δ⋅tr_t(q):= q- \\Delta \\cdot t</span><span aria-hidden=\"true\"><span><span></span><span><span>r</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>q</span><span>)</span><span></span><span>:</span></span><span><span></span><span>=</span><span></span></span><span><span></span><span>q</span><span></span><span>−</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>t</span></span></span></span></span> (this is just the remainder of <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span> divided by <span><span><span>tt</span><span aria-hidden=\"true\"><span><span></span><span>t</span></span></span></span></span>) we get:</p>\n<div><span><span><span>[ct(s)+ct′(s)]q=Δ⋅[m+m′]t+vadd mod q,\\begin{aligned}\n[ct(s) + ct'(s)]_q = \\Delta \\cdot [m+m']_t + v_{add} \\text{ mod }q,\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span>[</span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span></span><span>+</span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>[</span><span>m</span><span></span><span>+</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span> mod </span></span><span>q</span><span>,</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>where <span><span><span>vadd=v+v′−rt(q)⋅ϵv_{add} = v+v'-r_t(q) \\cdot \\epsilon</span><span aria-hidden=\"true\"><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>v</span><span></span><span>+</span><span></span></span><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>−</span><span></span></span><span><span></span><span><span>r</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>q</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>ϵ</span></span></span></span></span>.Click here if you want to see why this follows.</p>\n<div><span><span><span>[ct(s)+ct′(s)]q=Δ⋅[m+m′]t+Δ⋅t⋅ϵ+v+v′=Δ⋅[m+m′]t+(q−rt(q))⋅ϵ+v+v′≡Δ⋅[m+m′]t+vadd mod q.\\begin{aligned}\n[ct(s) + ct'(s)]_q \n    =&#x26; \\Delta \\cdot [m+m']_t + \\Delta \\cdot t \\cdot \\epsilon + v  + v' \\\\\n    =&#x26; \\Delta \\cdot [m+m']_t + (q-r_t(q)) \\cdot \\epsilon + v+v' \\\\\n    \\equiv&#x26; \\Delta \\cdot [m+m']_t + v_{add} \\text{ mod }q.\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span>[</span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span></span><span>+</span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span></span></span><span><span></span><span><span>=</span></span></span><span><span></span><span><span>≡</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span><span><span><span><span><span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>[</span><span>m</span><span></span><span>+</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>t</span><span></span><span>⋅</span><span></span><span>ϵ</span><span></span><span>+</span><span></span><span>v</span><span></span><span>+</span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span><span><span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>[</span><span>m</span><span></span><span>+</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>(</span><span>q</span><span></span><span>−</span><span></span><span><span>r</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>q</span><span>)</span><span>)</span><span></span><span>⋅</span><span></span><span>ϵ</span><span></span><span>+</span><span></span><span>v</span><span></span><span>+</span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span><span><span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>[</span><span>m</span><span></span><span>+</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span> mod </span></span><span>q</span><span>.</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>This suggests to set the new ciphertext as <span><span><span>cadd=(ct0+ct0′, ct1+ct1′)c_{add}=(ct_0+ct'_0, \\text{ }ct_1+ct'_1)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span> </span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>, which can be computed without the knowledge of the secret key <span><span><span>ss</span><span aria-hidden=\"true\"><span><span></span><span>s</span></span></span></span></span>. Therefore, <span><span><span>cadd=ct+ct′c_{add} = ct + ct'</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>c</span><span>t</span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> decrypts to the sum, <span><span><span>[m+m′]t[m+m']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, as long as the new \"noise\", <span><span><span>vaddv_{add}</span><span aria-hidden=\"true\"><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, is smaller than <span><span><span>Δ/2\\Delta/2</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span><span>/</span><span>2</span></span></span></span></span>.</p>\n<p>💡 The <strong>noise growth</strong> for <strong>addition</strong> is quite slow as <span><span><span>∥vadd∥&#x3C;∥v∥+∥v′∥+t&#x3C;2B+t\\|v_{add}\\|&#x3C;\\|v\\|+\\|v'\\| + t &#x3C; 2B+t</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>a</span><span>d</span><span>d</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>&#x3C;</span><span></span></span><span><span></span><span>∥</span><span>v</span><span>∥</span><span></span><span>+</span><span></span></span><span><span></span><span>∥</span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>∥</span><span></span><span>+</span><span></span></span><span><span></span><span>t</span><span></span><span>&#x3C;</span><span></span></span><span><span></span><span>2</span><span>B</span><span></span><span>+</span><span></span></span><span><span></span><span>t</span></span></span></span></span>, where <span><span><span>BB</span><span aria-hidden=\"true\"><span><span></span><span>B</span></span></span></span></span> is an upper bound on the \"noise\" of the ciphertexts that were added. This means we can probably do many additions before decryption stops working.</p>\n<p>To <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L261\">add ciphertexts</a>, it seems like we only need to add polynomials in <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>. So, ciphertext addition is a piece of cake 🍰.</p>\n<div><pre><code><span>def</span><span> </span><span>add_cipher</span><span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Add<span> </span>a<span> </span>ciphertext<span> </span>and<span> </span>a<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct1,<span> </span>ct2:<span> </span>ciphertexts.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>q:<span> </span>ciphertext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Tuple<span> </span>representing<span> </span>a<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_ct0<span> </span><span>=</span><span> </span>polyadd<span>(</span>ct1<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>ct2<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_ct1<span> </span><span>=</span><span> </span>polyadd<span>(</span>ct1<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>ct2<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>(</span>new_ct0<span>,</span><span> </span>new_ct1<span>)</span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>➡️ <strong>Multiplication:</strong> Producing a new ciphertext that decrypts the product of the two messages is not that easy. But we should still try 🤞. The first idea that comes to mind is to simply multiply the decryption equations. It worked for addition, so maybe it works here as well.</p>\n<div><span><span><span>ct(s)⋅ct′(s)=Δ2⋅mm′+Δ⋅(mv′+m′v)+vv′.  (1)ct(s) \\cdot ct'(s) = \\Delta^2 \\cdot mm' + \\Delta\\cdot (mv'+m'v) + vv'. \\text{ } \\ (1)</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>Δ</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span>m</span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>v</span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>v</span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>.</span><span><span> </span></span><span> </span><span>(</span><span>1</span><span>)</span></span></span></span></span></div>\n<p>If we scale by <span><span><span>t/qt/q</span><span aria-hidden=\"true\"><span><span></span><span>t</span><span>/</span><span>q</span></span></span></span></span> to get rid of one <span><span><span>Δ\\Delta</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span></span></span></span></span>, we get something that looks like what we want.</p>\n<div><span><span><span>tq⋅ct(s)⋅ct′(s)≈Δ⋅mm′+(mv′+m′v)\\frac{t}{q}\\cdot ct(s) \\cdot ct'(s) \\approx \\Delta \\cdot mm' + (mv'+m'v)</span><span aria-hidden=\"true\"><span><span></span><span><span></span><span><span><span><span><span><span></span><span><span>q</span></span></span><span><span></span><span></span></span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span></span><span>≈</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>(</span><span>m</span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>v</span><span>)</span></span></span></span></span></div>\n<p>It seems we are on the right track. Let's examine these expressions further. Recall the notations <span><span><span>ct(s)=ct0+ct1⋅sct(s) = ct_0 + ct_1\\cdot s</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span>(</span><span>s</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span></span></span></span></span> and  <span><span><span>ct′(s)=ct0′+ct1′⋅s.ct'(s) = ct'_0 + ct'_1\\cdot s.</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span>.</span></span></span></span></span> Both of them are <em>linear</em> in <span><span><span>ss</span><span aria-hidden=\"true\"><span><span></span><span>s</span></span></span></span></span>, but their multiplication is <em>quadratic</em> in <span><span><span>ss</span><span aria-hidden=\"true\"><span><span></span><span>s</span></span></span></span></span>:</p>\n<div><span><span><span>ct⋅ct′(s)=ct0⋅ct0′+(ct0⋅ct1′+ct1⋅ct0′)s+ct1⋅ct1′s2,ct\\cdot ct'(s) = ct_0\\cdot ct'_0 + (ct_0\\cdot ct'_1 + ct_1\\cdot ct'_0)s +ct_1\\cdot ct'_1s^2, </span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>(</span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span>,</span></span></span></span></span></div>\n<p>which we will write, in short, as <span><span><span>ct⋅ct′(s)=c0×+c1×⋅s+c2×⋅s2.ct \\cdot ct' (s) = c_0^\\times + c_1^{\\times}\\cdot s + c_2^{\\times} \\cdot s^2.</span><span aria-hidden=\"true\"><span><span></span><span>c</span><span>t</span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span>×</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></p>\n<p>But what about the right hand side?  Keep in mind that we work with plaintexts <span><span><span>m,m′∈Rtm, m' \\in R_t</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span>,</span><span></span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, so we should take <span><span><span>mm′mm'</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> with <em>coefficients modulo <span><span><span>tt</span><span aria-hidden=\"true\"><span><span></span><span>t</span></span></span></span></span></em>. Therefore, we can apply the same trick as we did for addition: we divide by <span><span><span>tt</span><span aria-hidden=\"true\"><span><span></span><span>t</span></span></span></span></span> and write <span><span><span>mm′=trm+[mm′]tmm' = tr_m + [mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>t</span><span><span>r</span><span><span><span><span><span><span></span><span><span>m</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, where <span><span><span>rmr_m</span><span aria-hidden=\"true\"><span><span></span><span><span>r</span><span><span><span><span><span><span></span><span><span>m</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> is an integer polynomial. Skipping a lot of details, we end up with:</p>\n<div><span><span><span>t/q⋅ct⋅ct′(s)=Δ⋅[mm′]t+u2t/q \\cdot ct \\cdot ct'(s) = \\Delta \\cdot [mm']_t + u_2</span><span aria-hidden=\"true\"><span><span></span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span>t</span><span></span><span>⋅</span><span></span></span><span><span></span><span>c</span><span><span>t</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>(</span><span>s</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></div>\n<p>for <span><span><span>u2u_2</span><span aria-hidden=\"true\"><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> a polynomial with <em>rational</em> coefficients. Looks like we're getting closer to obtaining the decryption equation. We can now write the original expression <span><span><span>(1)(1)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>1</span><span>)</span></span></span></span></span> as:</p>\n<div><span><span><span>t/q⋅c0×+t/q⋅c1×⋅s+t/q⋅c2×⋅s2=Δ⋅[mm′]t+u2t/q \\cdot c_0^\\times + t/q \\cdot c_1^{\\times} \\cdot s + t/q \\cdot c_2^{\\times} \\cdot s^2 = \\Delta \\cdot [mm']_t + u_2</span><span aria-hidden=\"true\"><span><span></span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span>×</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></div>\n<p>Hm.. these coefficients look like <em>rational polynomials</em>.  Recall that the ciphertext has <em>integer polynomials</em> as elements. So we round each coefficient appearing in the left hand side to their nearest integers and then reduce the whole equation modulo <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span>:</p>\n<div><span><span><span>[⌊t/q⋅c0×⌉]q+[⌊t/q⋅c1×⌉]q⋅s+[⌊t/q⋅c2×⌉]q⋅s2=Δ⋅[mm′]t+u3  (2)[\\lfloor t/q \\cdot c_0^{\\times} \\rceil]_q + [\\lfloor t/q \\cdot c_1^{\\times}\\rceil]_q \\cdot s + [\\lfloor t/q \\cdot c_2^{\\times}\\rceil]_q \\cdot s^2 = \\Delta \\cdot [mm']_t + u_3 \\text{ } \\ (2)</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>⌊</span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>⌉</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>[</span><span>⌊</span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>⌉</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span>[</span><span>⌊</span><span>t</span><span>/</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span><span><span></span><span><span><span>×</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>⌉</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span> </span></span><span> </span><span>(</span><span>2</span><span>)</span></span></span></span></span></div>\n<p>where <span><span><span>u3u_3</span><span aria-hidden=\"true\"><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> is a \"small\" integer polynomial, that represents the \"noise\" after one multiplication.</p>\n<p>💡 The <strong>noise growth</strong> for <strong>multiplication</strong> grows a lot faster:\n<span><span><span>∥u3∥≤2⋅n⋅t⋅B⋅(2n+1)⋅(n+1)+8t2⋅n2,\\|u_3\\| \\leq 2 \\cdot n \\cdot t \\cdot B \\cdot (2n+1)\\cdot (n+1) + 8t^2 \\cdot n^2,</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>≤</span><span></span></span><span><span></span><span>2</span><span></span><span>⋅</span><span></span></span><span><span></span><span>n</span><span></span><span>⋅</span><span></span></span><span><span></span><span>t</span><span></span><span>⋅</span><span></span></span><span><span></span><span>B</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span>2</span><span>n</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span>n</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>8</span><span><span>t</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>n</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span>,</span></span></span></span></span>\nwhere <span><span><span>BB</span><span aria-hidden=\"true\"><span><span></span><span>B</span></span></span></span></span> is an upper bound for the \"noise\" of the ciphertexts that were multiplied. We refer the enthusiastic reader for more details to <a href=\"https://eprint.iacr.org/2012/144.pdf\">[[FV12] Lem. 2]</a>.</p>\n<p>Phew, seems like we are done: we can consider as a ciphertext decrypting to <span><span><span>[mm′]t[mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> the tuple of scaled and rounded coefficients mod <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span> from left hand side of <span><span><span>(2)(2)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>2</span><span>)</span></span></span></span></span>, denoted by <span><span><span>(c0,c1,c2)(c_0, c_1, c_2)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>. Of course, for a correct decryption, <span><span><span>u3u_3</span><span aria-hidden=\"true\"><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> should have small enough coefficients. You can see below how these coefficients are <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L293\">computed</a> in Python:</p>\n<div><pre><code><span>def</span><span> </span><span>multiplication_coeffs</span><span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Multiply<span> </span>two<span> </span>ciphertexts.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct1:<span> </span>first<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct2:<span> </span>second<span> </span>ciphertext<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>q:<span> </span>ciphertext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>t:<span> </span>plaintext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Triplet<span> </span>(c0,c1,c2)<span> </span>encoding<span> </span>the<span> </span>multiplied<span> </span>ciphertexts.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_0<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>polymul_wm<span>(</span>ct1<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>ct2<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>poly_mod<span>)</span><span> </span><span>*</span><span> </span>t<span> </span><span>/</span><span> </span>q<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_1<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>polyadd_wm<span>(</span>polymul_wm<span>(</span>ct1<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>ct2<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span>polymul_wm<span>(</span>ct1<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>ct2<span>[</span><span>0</span><span>]</span><span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span>poly_mod<span>)</span><span> </span><span>*</span><span> </span>t<span> </span><span>/</span><span> </span>q<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_2<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>polymul_wm<span>(</span>ct1<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>ct2<span>[</span><span>1</span><span>]</span><span>,</span><span> </span>poly_mod<span>)</span><span> </span><span>*</span><span> </span>t<span> </span><span>/</span><span> </span>q<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span>c_0<span>,</span><span> </span>c_1<span>,</span><span> </span>c_2<span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>But, as a popular movie character would say, <strong>\"Houston, we have a problem\"</strong>. This tuple of coefficients has size 3, <strong>not 2 as the usual ciphertext</strong>. Moreover, the size of such tuple will grow linearly in the number of further multiplications performed on the ciphertexts. In order to restore the size of the ciphertext as 2, we will make use of the so called <em>relinearization technique</em>. 💥</p>\n<h3>Relinearization</h3>\n<p>💡 The idea of <strong>Relinearization</strong> is to reduce the triplet\n<span><span><span>(c0,c1,c2)(c_0,c_1,c_2)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span> to a ciphertext pair <span><span><span>(c0′,c1′)∈Rq×Rq(c_0',c_1') \\in R_q \\times R_q</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>∈</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>×</span><span></span></span><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> that\nrecovers <span><span><span>[mm′]t[mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> when decrypted with the usual decryption\nalgorithm. We would like to produce a pair <span><span><span>(c0′,c1′)(c_0',c_1')</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>, without using the\nsecret <span><span><span>ss</span><span aria-hidden=\"true\"><span><span></span><span>s</span></span></span></span></span>, such that:\n<span><span><span>[c0′+s⋅c1′]q=[c0+c1⋅s+c2⋅s2+r]q[c_0' + s\\cdot c_1']_q = [c_0 + c_1\\cdot s + c_2 \\cdot s^2 + r ]_q</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>s</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span><span><span></span><span><span><span>′</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>r</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>,\nwhere <span><span><span>rr</span><span aria-hidden=\"true\"><span><span></span><span>r</span></span></span></span></span> is a \"small\" error. The correct decryption will be possible, as the\n\"small\" error <span><span><span>rr</span><span aria-hidden=\"true\"><span><span></span><span>r</span></span></span></span></span> will vanish because of the rounding in decryption.</p>\n<p>As the name suggests it, we transform the degree 2 polynomial, <span><span><span>c0+c1⋅s+c2⋅s2c_0+c_1\\cdot s+c_2 \\cdot s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> into a linear polynomial, i.e. of degree 1. This involves giving extra info about  <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span>. Using a special public key, called <em>relinearization key</em>, we can <em>linearize</em> <span><span><span>c2⋅s2c_2 \\cdot s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> (up to some small error) as</p>\n<div><span><span><span>[c20+c21⋅s]q=[c2⋅s2+erelin]q.[c_{20}+c_{21} \\cdot s]_q = [c_2\\cdot s^2 + e_{relin}]_q.</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>r</span><span>e</span><span>l</span><span>i</span><span>n</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>Therefore, by Equation <span><span><span>(2)(2)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>2</span><span>)</span></span></span></span></span>, we can get a standard ciphertext pair as</p>\n<div><span><span><span>cmul=(c0+c20,c1+c21),c_{mul} =(c_0+c_{20}, c_1+c_{21}), </span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span>,</span></span></span></span></span></div>\n<p>that correctly decrypts to <span><span><span>[mm′]t[mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, as you can see below:</p>\n<div><span><span><span>[c0+c20+s⋅(c1+c21)]q=[c0+c1⋅s+c2⋅s2+erelin]q=Δ⋅[mm′]t+vmult,\\begin{aligned}\n[c_0 + c_{20} + s\\cdot (c_1 + c_{21})]_q = [c_0 + c_1 \\cdot s + c_2 \\cdot s^2 + e_{relin}]_q = \\Delta \\cdot [mm']_t + v_{mult},\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span>s</span><span></span><span>⋅</span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>r</span><span>e</span><span>l</span><span>i</span><span>n</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span><span>Δ</span><span></span><span>⋅</span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span><span>t</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>where <span><span><span>vmult=u3+erelin.v_{mult} = u_3 + e_{relin}.</span><span aria-hidden=\"true\"><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span><span>t</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>r</span><span>e</span><span>l</span><span>i</span><span>n</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>.</span></span></span></span></span> Therefore, <span><span><span>cmulc_{mul}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> decrypts correctly\nto <span><span><span>[mm′]t[mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> if <span><span><span>∥vmult∥\\|v_{mult}\\|</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span><span>t</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span></span></span></span></span> is less than <span><span><span>Δ/2\\Delta/2</span><span aria-hidden=\"true\"><span><span></span><span>Δ</span><span>/</span><span>2</span></span></span></span></span>. So yay! we finally\nknow how to get a ciphertext encoding multiplication!</p>\n<h3>Different versions of relinearization</h3>\n<p>To complete this discussion, we need to see how to construct the linear\napproximation of <span><span><span>c2⋅s2c_2 \\cdot s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> and find out what the relinearization key is\nabout. For this, we will go a bit deeper into (technical) details. Don't\npanic, we'll take you step by step. 😄</p>\n<p>We are going to present two versions of linearizing <span><span><span>c2⋅s2c_2\\cdot s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span>. First,\nkeep in mind that <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> should not be known, so we give the relinearization\nkey as a <em>masked version</em> of <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Let's think of the following situation: say we include in the public key the\nfollowing <em>relinearization</em> key:</p>\n<div><span><span><span>rlk=(rlk0,rlk1)=([−(a⋅s+e)+s2]q,a),rlk = (rlk_0, rlk_1) = ([-(a\\cdot s+e)+s^2]_q,a),</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>[</span><span>−</span><span>(</span><span>a</span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span>e</span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>a</span><span>)</span><span>,</span></span></span></span></span></div>\n<p>for some uniform <span><span><span>aa</span><span aria-hidden=\"true\"><span><span></span><span>a</span></span></span></span></span> in <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> and a small error <span><span><span>ee</span><span aria-hidden=\"true\"><span><span></span><span>e</span></span></span></span></span>.</p>\n<p>❗ Intuitively, the secret <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> is hidden by something that looks\nlike an\n<a href=\"https://en.wikipedia.org/wiki/Ring_learning_with_errors#The_RLWE_Problem\">RLWE</a>\nsample. Notice that,</p>\n<div><span><span><span>rlk0+rlk1⋅s=s2+e.rlk_0 + rlk_1 \\cdot s = s^2 + e.</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>=</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>e</span><span>.</span></span></span></span></span></div>\n<p>To obtain the approximation of <span><span><span>c2⋅s2c_2\\cdot s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> we should multiply the above\nexpression by <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>. By doing so, we end up with the rather large-norm term\n<span><span><span>c2⋅ec_2\\cdot e</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>e</span></span></span></span></span>, due to the size of the coefficients of <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>. We cannot allow\nsuch a large \"noise\" as it will interfere with decryption. To avoid this\n\"noise\" blow-up we will employ two techniques described below.</p>\n<h3>💥 Relinearization: Version 1</h3>\n<p>One strategy is to use base <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span> decomposition of the coefficients of <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> to\nslice <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> into components of small norm. To do this, we pick a base <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span> and\nwrite each coefficient of <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> in this base. Recall that <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> is a integer\npolynomial, modulo <span><span><span>xn+1x^n+1</span><span aria-hidden=\"true\"><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>n</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span>, so of degree at most <span><span><span>n−1n-1</span><span aria-hidden=\"true\"><span><span></span><span>n</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span></span></span></span></span>. If we write <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> as\na polynomial:</p>\n<div><span><span><span>c2(x)=c2[0]+c2[1]⋅x+…+c2[n−1]⋅xn−1c_2(x) = c_2[0] + c_2[1]\\cdot x+\\ldots+c_2[n-1]\\cdot x^{n-1}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>0</span><span>]</span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>1</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span>x</span><span></span><span>+</span><span></span></span><span><span></span><span>…</span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>n</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>then we can decompose each coefficient <span><span><span>c2[i]c_2[i]</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span></span></span></span></span> in base <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span>. Notice that\nsince <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> has coefficients in <span><span><span>[0,q−1][0,q-1]</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>0</span><span>,</span><span></span><span>q</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span><span>]</span></span></span></span></span>, the maximum power appearing in\nthese representations is <span><span><span>TℓT^{\\ell}</span><span aria-hidden=\"true\"><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span><span>ℓ</span></span></span></span></span></span></span></span></span></span></span></span></span>, where <span><span><span>ℓ=⌊log⁡T(q)⌋\\ell = \\lfloor \\log_T(q)\\rfloor</span><span aria-hidden=\"true\"><span><span></span><span>ℓ</span><span></span><span>=</span><span></span></span><span><span></span><span>⌊</span><span><span>lo<span>g</span></span><span><span><span><span><span><span></span><span><span>T</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>q</span><span>)</span><span>⌋</span></span></span></span></span>.\nFor base decomposition we <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L102\">use</a> the function <span><span><span>int2base\\texttt{int2base}</span><span aria-hidden=\"true\"><span><span></span><span><span>int2base</span></span></span></span></span></span>:</p>\n<div><pre><code><span>def</span><span> </span><span>int2base</span><span>(</span>n<span>,</span><span> </span>b<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Generates<span> </span>the<span> </span>base<span> </span>decomposition<span> </span>of<span> </span>an<span> </span>integer<span> </span>n.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>n:<span> </span>integer<span> </span>to<span> </span>be<span> </span>decomposed.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>b:<span> </span>base.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>array<span> </span>of<span> </span>coefficients<span> </span>from<span> </span>the<span> </span>base<span> </span>decomposition<span> </span>of<span> </span>n<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>with<span> </span>the<span> </span>coeff[i]<span> </span>being<span> </span>the<span> </span>coeff<span> </span>of<span> </span>b<span> </span>^<span> </span>i.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>if</span><span> </span>n<span> </span><span>&#x3C;</span><span> </span>b<span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>[</span>n<span>]</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>else</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>[</span>n<span> </span><span>%</span><span> </span>b<span>]</span><span> </span><span>+</span><span> </span>int2base<span>(</span>n<span> </span><span>//</span><span> </span>b<span>,</span><span> </span>b<span>)</span><span> </span><span> </span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>The relinearization key, <span><span><span>rlkrlk</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span></span></span></span></span> in this version, consists of masked variants\nof <span><span><span>Ti⋅s2,T^i \\cdot s^2,</span><span aria-hidden=\"true\"><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span>,</span></span></span></span></span> instead of <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span>. More precisely, for <span><span><span>0≤i≤ℓ0 \\leq i \\leq\n\\ell</span><span aria-hidden=\"true\"><span><span></span><span>0</span><span></span><span>≤</span><span></span></span><span><span></span><span>i</span><span></span><span>≤</span><span></span></span><span><span></span><span>ℓ</span></span></span></span></span>, this is defined as follows:</p>\n<div><span><span><span>(rlk0[i],rlk1[i])=([−(ai⋅s+ei)+Ti⋅s2]q,ai)(rlk_0[i], rlk_1[i]) = ([-(a_i \\cdot s + e_i) + T^i\\cdot s^2]_{q}, a_i)</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span>,</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>[</span><span>−</span><span>(</span><span><span>a</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span><span>q</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>a</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span></div>\n<p>for <span><span><span>aia_i</span><span aria-hidden=\"true\"><span><span></span><span><span>a</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> chosen uniformly in <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> and <span><span><span>eie_i</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> chosen according to the\ndistribution <span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span> over <span><span><span>RR</span><span aria-hidden=\"true\"><span><span></span><span>R</span></span></span></span></span> (yep, same error distribution as in the\ndescription of the scheme). Below you can find the <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L135\">implementation</a> of the\nfunction that generates the evaluation (relinearization) key\n<span><span><span>(rlk0[i],rlk1[i])0≤i≤ℓ(rlk_0[i],rlk_1[i])_{0\\leq i\\leq\\ell}</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span>,</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span><span>)</span><span><span><span><span><span><span></span><span><span><span>0</span><span>≤</span><span>i</span><span>≤</span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<div><pre><code><span>def</span><span> </span><span>evaluate_keygen_v1</span><span>(</span>sk<span>,</span><span> </span>size<span>,</span><span> </span>modulus<span>,</span><span> </span>T<span>,</span><span> </span>poly_mod<span>,</span><span> </span>std2<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Generate<span> </span>a<span> </span>relinearization<span> </span>key<span> </span>using<span> </span>version<span> </span>1.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>sk:<span> </span>secret<span> </span>key.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>size:<span> </span>size<span> </span>of<span> </span>the<span> </span>polynomials.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>modulus:<span> </span>coefficient<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>T:<span> </span>base.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>std2:<span> </span>standard<span> </span>deviation<span> </span>for<span> </span>the<span> </span>error<span> </span>distribution.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlk:<span> </span>relinearization<span> </span>key.<span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>n<span> </span><span>=</span><span> </span><span>len</span><span>(</span>poly_mod<span>)</span><span> </span><span>-</span><span> </span><span>1</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>l<span> </span><span>=</span><span> </span>np<span>.</span><span>int</span><span>(</span>np<span>.</span>log<span>(</span>modulus<span>)</span><span> </span><span>/</span><span> </span>np<span>.</span>log<span>(</span>T<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>rlk0<span> </span><span>=</span><span> </span>np<span>.</span>zeros<span>(</span><span>(</span>l<span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span>n<span>)</span><span>,</span><span> </span>dtype<span>=</span>np<span>.</span>int64<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>rlk1<span> </span><span>=</span><span> </span>np<span>.</span>zeros<span>(</span><span>(</span>l<span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span>n<span>)</span><span>,</span><span> </span>dtype<span>=</span>np<span>.</span>int64<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>for</span><span> </span>i<span> </span><span>in</span><span> </span><span>range</span><span>(</span>l<span> </span><span>+</span><span> </span><span>1</span><span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>a<span> </span><span>=</span><span> </span>gen_uniform_poly<span>(</span>size<span>,</span><span> </span>modulus<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>e<span> </span><span>=</span><span> </span>gen_normal_poly<span>(</span>size<span>,</span><span> </span><span>0</span><span>,</span><span> </span>std2<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>secret_part<span> </span><span>=</span><span> </span>T<span> </span><span>**</span><span> </span>i<span> </span><span>*</span><span> </span>poly<span>.</span>polymul<span>(</span>sk<span>,</span><span> </span>sk<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>b<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>polyadd<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polymul_wm<span>(</span><span>-</span>a<span>,</span><span> </span>sk<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polyadd_wm<span>(</span><span>-</span>e<span>,</span><span> </span>secret_part<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span>modulus<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>b<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span>concatenate<span>(</span><span> </span><span>(</span>b<span>,</span><span> </span><span>[</span><span>0</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span>n<span> </span><span>-</span><span> </span><span>len</span><span>(</span>b<span>)</span><span>)</span><span> </span><span>)</span><span> </span><span>)</span><span>)</span><span> </span><span>#<span> </span>pad<span> </span>b<span> </span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>a<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span>concatenate<span>(</span><span> </span><span>(</span>a<span>,</span><span> </span><span>[</span><span>0</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span>n<span> </span><span>-</span><span> </span><span>len</span><span>(</span>a<span>)</span><span>)</span><span> </span><span>)</span><span> </span><span>)</span><span>)</span><span> </span><span>#<span> </span>pad<span> </span>a<span> </span><span> </span><span> </span><span> </span></span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlk0<span>[</span>i<span>]</span><span> </span><span>=</span><span> </span>b<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlk1<span>[</span>i<span>]</span><span> </span><span>=</span><span> </span>a<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span>rlk0<span>,</span><span> </span>rlk1<span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>Now, given <span><span><span>rlkrlk</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span></span></span></span></span>, let's look at how we compute the linear approximation of\n<span><span><span>c2⋅s2c_2 \\cdot s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span>. Let the polynomials <span><span><span>c2(i)c_2(i)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span></span></span></span></span> be the base <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span> decomposition\nof <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, such that:</p>\n<div><span><span><span>c2=∑i=0ℓc2(i)⋅Ti.c_2 = \\displaystyle \\sum_{i=0}^{\\ell} c_2(i)\\cdot T^i.</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>We can get the linear approximation given by <span><span><span>(c20,c21)(c_{20}, c_{21})</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>, where:</p>\n<div><span><span><span>c20=∑i=0ℓrlk0[i]⋅c2(i) and c21=∑i=0ℓrlk1[i]⋅c2(i).c_{20} = \\sum_{i=0}^{\\ell} rlk_0[i]\\cdot c_2(i) \\text{ and } c_{21} = \\sum_{i=0}^{\\ell} rlk_1[i]\\cdot c_2(i).</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span><span><span> and </span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span><span>.</span></span></span></span></span></div>\n<p>Therefore, <span><span><span>c20+c21⋅s=c2⋅s2+erelin_v1c_{20} + c_{21} \\cdot s = c_2 \\cdot s^2 + e_{\\text{relin\\_v1}}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>=</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v1</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>\nwhere <span><span><span>erelin_v1e_{\\text{relin\\_v1}}</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v1</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> is an error term from <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<div><span><span><span>c20+c21⋅s=∑i=0ℓ[−(ai⋅s+ei)+Ti⋅s2]c2(i)+∑i=0ℓai⋅s⋅c2(i)=−∑i=0ℓei⋅c2(i)+c2⋅s2.\\begin{aligned}\nc_{20} + c_{21} \\cdot s\n    &#x26;= \\sum_{i=0}^{\\ell} [-(a_i\\cdot s+e_i)+T^i\\cdot s^2] c_2(i) + \\sum_{i=0}^{\\ell} a_i \\cdot s \\cdot c_2(i)\\\\\n    &#x26;= -\\sum_{i=0}^{\\ell} e_i \\cdot c_2(i) + c_2 \\cdot s^2.\n \\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span></span></span><span><span></span><span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span><span><span><span><span><span></span><span><span></span><span></span><span>=</span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span>[</span><span>−</span><span>(</span><span><span>a</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span>]</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span><span></span><span>+</span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>a</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span><span></span><span>⋅</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span>−</span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span>.</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>💡 By doing base <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span> decomposition we get a \"small\" <strong>relinearization noise</strong>:\n<span><span><span>∥erelin_v1∥≤(ℓ+1)⋅B⋅T⋅n/2\\|e_{\\text{relin\\_v1}}\\| \\leq (\\ell+1)\\cdot B \\cdot T \\cdot n/2</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v1</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>≤</span><span></span></span><span><span></span><span>(</span><span>ℓ</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>B</span><span></span><span>⋅</span><span></span></span><span><span></span><span>T</span><span></span><span>⋅</span><span></span></span><span><span></span><span>n</span><span>/</span><span>2</span></span></span></span></span>\nwhere <span><span><span>BB</span><span aria-hidden=\"true\"><span><span></span><span>B</span></span></span></span></span> is an upper bound on the errors <span><span><span>eie_i</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>❓ Now the question is how to compute the polynomials <span><span><span>c2(i)c_2(i)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>i</span><span>)</span></span></span></span></span>. The coefficients of these polynomials prove to be nothing but the columns of the matrix <span><span><span>Reps\\texttt{Reps}</span><span aria-hidden=\"true\"><span><span></span><span><span>Reps</span></span></span></span></span></span>.</p>\n<p><span><span><span>c2[i]=Reps[i][0]+Reps[i][1]⋅T+…+Reps[i][ℓ]⋅Tℓ.c_2[i] = \\mathtt{Reps}[i][0] + \\mathtt{Reps}[i][1] \\cdot T+ \\ldots + \\mathtt{Reps}[i][\\ell] \\cdot T^{\\ell}.</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span></span><span>=</span><span></span></span><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span><span></span><span>+</span><span></span></span><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>1</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span>T</span><span></span><span>+</span><span></span></span><span><span></span><span>…</span><span></span><span>+</span><span></span></span><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>ℓ</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span><span>ℓ</span></span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></p>\n<p>If we multiply this by <span><span><span>xix^i</span><span aria-hidden=\"true\"><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span></span></span></span></span>, we get:</p>\n<div><span><span><span>c2[i]⋅xi=Reps[i][0]⋅xi+Reps[i][1]⋅xi⋅T+…+Reps[i][ℓ]⋅xi⋅Tℓ.c_2[i] \\cdot x^i =\n    \\mathtt{Reps}[i][0] \\cdot x^i +\n    \\mathtt{Reps}[i][1] \\cdot x^i \\cdot T+ \\ldots +\n    \\mathtt{Reps}[i][\\ell] \\cdot x^i \\cdot T^{\\ell}.</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>[</span><span>i</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>1</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>T</span><span></span><span>+</span><span></span></span><span><span></span><span>…</span><span></span><span>+</span><span></span></span><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>ℓ</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span><span>ℓ</span></span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>Summing up all these for each <span><span><span>0≤i≤n−10\\leq i \\leq n-1</span><span aria-hidden=\"true\"><span><span></span><span>0</span><span></span><span>≤</span><span></span></span><span><span></span><span>i</span><span></span><span>≤</span><span></span></span><span><span></span><span>n</span><span></span><span>−</span><span></span></span><span><span></span><span>1</span></span></span></span></span>, on the left hand side we\nactually get <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>:</p>\n<div><span><span><span>c2=∑i=0n−1Reps[i][0]⋅xi+(∑i=0n−1Reps[i][1]⋅xi)⋅T+…+(∑i=0n−1Reps[i][ℓ]⋅xi)⋅Tℓ.c_2 = \\displaystyle \\sum_{i=0}^{n-1} \\mathtt{Reps}[i][0] \\cdot x^i\n    + (\\sum_{i=0}^{n-1}\\mathtt{Reps}[i][1] \\cdot x^i) \\cdot  T+ \\ldots\n    + (\\sum_{i=0}^{n-1} \\mathtt{Reps}[i][\\ell] \\cdot x^i) \\cdot T^{\\ell}.</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>0</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>(</span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>1</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>T</span><span></span><span>+</span><span></span></span><span><span></span><span>…</span><span></span><span>+</span><span></span></span><span><span></span><span>(</span><span><span><span><span><span><span></span><span><span><span>i</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span><span>[</span><span>i</span><span>]</span><span>[</span><span>ℓ</span><span>]</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>x</span><span><span><span><span><span><span></span><span><span>i</span></span></span></span></span></span></span></span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span><span>ℓ</span></span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>So, if we denote the above sums by polynomials <span><span><span>c2(j)c_2(j)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>j</span><span>)</span></span></span></span></span>, we simply get</p>\n<div><span><span><span>c2=∑j=0ℓc2(j)⋅Tj.c_2 = \\displaystyle \\sum_{j=0}^{\\ell} c_2(j)\\cdot T^j.</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>j</span><span>=</span><span>0</span></span></span></span><span><span></span><span><span>∑</span></span></span><span><span></span><span><span><span>ℓ</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>j</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>T</span><span><span><span><span><span><span></span><span><span>j</span></span></span></span></span></span></span></span><span>.</span></span></span></span></span></div>\n<p>Phew, what a relief! Notice that the coefficients for each polynomial\n<span><span><span>c2(j)c_2(j)</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>(</span><span>j</span><span>)</span></span></span></span></span> are given by the <span><span><span>jj</span><span aria-hidden=\"true\"><span><span></span><span>j</span></span></span></span></span>-th column of <span><span><span>Reps\\mathtt{Reps}</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span>e</span><span>p</span><span>s</span></span></span></span></span></span>.</p>\n<p>So after all this math, we finally got the linear approximation of <span><span><span>c2⋅s2c_2 \\cdot\ns^2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> and thus, we can derive the standard ciphertext encoding the\nmultiplication of the plaintexts. Here comes the <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L311\">code</a>:</p>\n<div><pre><code><span>def</span><span> </span><span>mul_cipher_v1</span><span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>T<span>,</span><span> </span>poly_mod<span>,</span><span> </span>rlk0<span>,</span><span> </span>rlk1<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Multiply<span> </span>two<span> </span>ciphertexts.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct1:<span> </span>first<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct2:<span> </span>second<span> </span>ciphertext<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>q:<span> </span>ciphertext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>t:<span> </span>plaintext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>T:<span> </span>base<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlk0,<span> </span>rlk1:<span> </span>output<span> </span>of<span> </span>the<span> </span>EvaluateKeygen_v1<span> </span>function.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Tuple<span> </span>representing<span> </span>a<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>n<span> </span><span>=</span><span> </span><span>len</span><span>(</span>poly_mod<span>)</span><span> </span><span>-</span><span> </span><span>1</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>l<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span>log<span>(</span>q<span>)</span><span> </span><span>/</span><span> </span>np<span>.</span>log<span>(</span>T<span>)</span><span>)</span><span> </span><span> </span><span>#l<span> </span>=<span> </span>log_T(q)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_0<span>,</span><span> </span>c_1<span>,</span><span> </span>c_2<span> </span><span>=</span><span> </span>multiplication_coeffs<span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_2<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span>concatenate<span>(</span><span> </span><span>(</span>c_2<span>,</span><span> </span><span>[</span><span>0</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span>n<span> </span><span>-</span><span> </span><span>len</span><span>(</span>c_2<span>)</span><span>)</span><span>)</span><span> </span><span>)</span><span>)</span><span> </span><span>#pad</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#Next,<span> </span>we<span> </span>decompose<span> </span>c_2<span> </span>in<span> </span>base<span> </span>T:<span> </span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#more<span> </span>precisely,<span> </span>each<span> </span>coefficient<span> </span>of<span> </span>c_2<span> </span>is<span> </span>decomposed<span> </span>in<span> </span>base<span> </span>T<span> </span>such<span> </span>that<span> </span>c_2<span> </span>=<span> </span>sum<span> </span>T**i<span> </span>*<span> </span>c_2(i)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Reps<span> </span><span>=</span><span> </span>np<span>.</span>zeros<span>(</span><span>(</span>n<span>,</span><span> </span>l<span> </span><span>+</span><span> </span><span>1</span><span>)</span><span>,</span><span> </span>dtype<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>for</span><span> </span>i<span> </span><span>in</span><span> </span><span>range</span><span>(</span>n<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rep<span> </span><span>=</span><span> </span>int2base<span>(</span>c_2<span>[</span>i<span>]</span><span>,</span><span> </span>T<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rep2<span> </span><span>=</span><span> </span>rep<span> </span><span>+</span><span> </span><span>[</span><span>0</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span>l<span> </span><span>+</span><span> </span><span>1</span><span> </span><span>-</span><span> </span><span>len</span><span>(</span>rep<span>)</span><span>)</span><span> </span><span>#pad<span> </span>with<span> </span>0</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Reps<span>[</span>i<span>]</span><span> </span><span>=</span><span> </span>np<span>.</span>array<span>(</span>rep2<span>,</span><span> </span>dtype<span>=</span>np<span>.</span>int64<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Each<span> </span>row<span> </span>Reps[i]<span> </span>is<span> </span>the<span> </span>base<span> </span>T<span> </span>representation<span> </span>of<span> </span>the<span> </span>i-th<span> </span>coefficient<span> </span>c_2[i].</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>The<span> </span>polynomials<span> </span>c_2(j)<span> </span>are<span> </span>given<span> </span>by<span> </span>the<span> </span>columns<span> </span>Reps[:,j].</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_20<span> </span><span>=</span><span> </span>np<span>.</span>zeros<span>(</span>shape<span>=</span>n<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_21<span> </span><span>=</span><span> </span>np<span>.</span>zeros<span>(</span>shape<span>=</span>n<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Here<span> </span>we<span> </span>compute<span> </span>the<span> </span>sums:<span> </span>rlk[j][0]<span> </span>*<span> </span>c_2(j)<span> </span>and<span> </span>rlk[j][1]<span> </span>*<span> </span>c_2(j)<span> </span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>for</span><span> </span>j<span> </span><span>in</span><span> </span><span>range</span><span>(</span>l<span> </span><span>+</span><span> </span><span>1</span><span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>c_20<span> </span><span>=</span><span> </span>polyadd_wm<span>(</span>c_20<span>,</span><span> </span>polymul_wm<span>(</span>rlk0<span>[</span>j<span>]</span><span>,</span><span> </span>Reps<span>[</span><span>:</span><span>,</span>j<span>]</span><span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>c_21<span> </span><span>=</span><span> </span>polyadd_wm<span>(</span>c_21<span>,</span><span> </span>polymul_wm<span>(</span>rlk1<span>[</span>j<span>]</span><span>,</span><span> </span>Reps<span>[</span><span>:</span><span>,</span>j<span>]</span><span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_20<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>c_20<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_21<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>c_21<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_c0<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>polyadd_wm<span>(</span>c_0<span>,</span><span> </span>c_20<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_c1<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>polyadd_wm<span>(</span>c_1<span>,</span><span> </span>c_21<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>(</span>new_c0<span>,</span><span> </span>new_c1<span>)</span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<h3>💥 Relinearization: Version 2</h3>\n<p>This version is much simpler and cleaner than the previous one (yay!) and uses the so-called <em>modulus switching</em> technique. Recall that if we try to naively mask <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> in the reliniarization key, then there is a large blow-up in the noise because of the <span><span><span>c2c_2</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> multiplication. We want to avoid this to get a correct decryption.</p>\n<p>In this version we mask <span><span><span>s2s^2</span><span aria-hidden=\"true\"><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span></span></span></span></span> modulo a a different modulus, <span><span><span>p⋅qp\\cdot q</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span></span><span>⋅</span><span></span></span><span><span></span><span>q</span></span></span></span></span>, with a much larger <span><span><span>p≫qp\\gg q</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span></span><span>≫</span><span></span></span><span><span></span><span>q</span></span></span></span></span>, as shown below.</p>\n<div><span><span><span>rlk=(rlk0,rlk1)=([−(a′⋅s+e′)+p⋅s2]p⋅q,a′),rlk = (rlk_0, rlk_1) = ([-(a' \\cdot s + e') + p\\cdot s^2]_{p\\cdot q}, a'),</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span>[</span><span>−</span><span>(</span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>p</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span><span>p</span><span>⋅</span><span>q</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span>,</span></span></span></span></span></div>\n<p>for a uniform <span><span><span>a′a'</span><span aria-hidden=\"true\"><span><span></span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> in <span><span><span>Rp⋅qR_{p\\cdot q}</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span><span>p</span><span>⋅</span><span>q</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> and <span><span><span>e′e'</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> drawn according to an error distribution <span><span><span>χ′\\chi'</span><span aria-hidden=\"true\"><span><span></span><span><span>χ</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> over <span><span><span>R.R.</span><span aria-hidden=\"true\"><span><span></span><span>R</span><span>.</span></span></span></span></span>\nRemember that our goal is to produce an approximation of <span><span><span>[c2⋅s2]q[c_2\\cdot s^2]_q</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>. The idea is that when we scale from <span><span><span>p⋅qp\\cdot q</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span></span><span>⋅</span><span></span></span><span><span></span><span>q</span></span></span></span></span> back to <span><span><span>qq</span><span aria-hidden=\"true\"><span><span></span><span>q</span></span></span></span></span>, the noise gets divided by the large integer <span><span><span>pp</span><span aria-hidden=\"true\"><span><span></span><span>p</span></span></span></span></span>, significantly reducing its size.</p>\n<p>In a safe implementation the distribution <span><span><span>χ′\\chi'</span><span aria-hidden=\"true\"><span><span></span><span><span>χ</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> should be distinct from\n<span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span> and its parameters should be carefully chosen for security reasons.\nSince security is not our main goal in this blog post, you can check the\npaper for further details.</p>\n<div><pre><code><span>def</span><span> </span><span>evaluate_keygen_v2</span><span>(</span>sk<span>,</span><span> </span>size<span>,</span><span> </span>modulus<span>,</span><span> </span>poly_mod<span>,</span><span> </span>extra_modulus<span>,</span><span> </span>std2<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Generate<span> </span>a<span> </span>relinearization<span> </span>key<span> </span>using<span> </span>version<span> </span>2.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>sk:<span> </span>secret<span> </span>key<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>size:<span> </span>size<span> </span>of<span> </span>the<span> </span>polynomials.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>modulus:<span> </span>coefficient<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>extra_modulus:<span> </span>the<span> </span>\"p\"<span> </span>modulus<span> </span>for<span> </span>modulus<span> </span>switching.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>st2:<span> </span>standard<span> </span>deviation<span> </span>for<span> </span>the<span> </span>error<span> </span>distribution.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlk0,<span> </span>rlk1:<span> </span>relinearization<span> </span>key.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_modulus<span> </span><span>=</span><span> </span>modulus<span> </span><span>*</span><span> </span>extra_modulus<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>a<span> </span><span>=</span><span> </span>gen_uniform_poly<span>(</span>size<span>,</span><span> </span>new_modulus<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>e<span> </span><span>=</span><span> </span>gen_normal_poly<span>(</span>size<span>,</span><span> </span><span>0</span><span>,</span><span> </span>std2<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>secret_part<span> </span><span>=</span><span> </span>extra_modulus<span> </span><span>*</span><span> </span>poly<span>.</span>polymul<span>(</span>sk<span>,</span><span> </span>sk<span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>b<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>polyadd_wm<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polymul_wm<span>(</span><span>-</span>a<span>,</span><span> </span>sk<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>polyadd_wm<span>(</span><span>-</span>e<span>,</span><span> </span>secret_part<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span> </span><span>%</span><span> </span>new_modulus<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span>b<span>,</span><span> </span>a<span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<p>The linear approximation of <span><span><span>[c2⋅s2]q[c_2 \\cdot s^2]_q</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> can be computed from the pair:</p>\n<div><span><span><span>(c20,c21)=([⌊c2⋅rlk0p⌉]q,[⌊c2⋅rlk1p⌉]q).(c_{20}, c_{21}) = \\Big(\\Big[\\Big\\lfloor\\frac{c_2 \\cdot rlk_0}{p}\\Big\\rceil\\Big]_q, \\Big[\\Big\\lfloor\\frac{c_2 \\cdot rlk_1}{p}\\Big\\rceil\\Big]_q\\Big).</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span><span>(</span></span><span><span>[</span></span><span><span>⌊</span></span><span><span></span><span><span><span><span><span><span></span><span><span>p</span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span><span>⌉</span></span><span><span><span>]</span></span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>[</span></span><span><span>⌊</span></span><span><span></span><span><span><span><span><span><span></span><span><span>p</span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span><span>⌉</span></span><span><span><span>]</span></span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span><span>)</span></span><span>.</span></span></span></span></span></div>\n<p>Indeed, <span><span><span>[c20+c21⋅s]q=[c2⋅s2]q+erelin_v2,[c_{20} + c_{21} \\cdot s]_q = [c_2 \\cdot s^2]_q + e_{\\text{relin\\_v2}},</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>[</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v2</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span></span></span></span></span> for a \"small\" error <span><span><span>erelin_v2e_{\\text{relin\\_v2}}</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v2</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> in <span><span><span>RqR_q</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>.</p>\n<div><span><span><span>c2⋅rlk0p+c2⋅rlk1p⋅s=c2⋅[−(a′⋅s+e′)+p⋅s2]p⋅q+c2⋅a′⋅sp=c2⋅s2+−c2⋅e′p+q⋅K,\\begin{aligned}\n\\frac{c_2 \\cdot rlk_0}{p} + \\frac{c_2 \\cdot rlk_1}{p} \\cdot s \n    &#x26;= \\frac{c_2\\cdot [-(a'\\cdot s+e') + p\\cdot s^2]_{p\\cdot q}+c_2 \\cdot a' \\cdot s}{p}\\\\\n    &#x26;= c_2\\cdot s^2 +\\frac{-c_2\\cdot e'}{p} + q \\cdot K,\n\\end{aligned}</span><span aria-hidden=\"true\"><span><span></span><span><span><span><span><span><span><span><span></span><span><span><span></span><span><span><span><span><span><span></span><span><span>p</span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span></span><span>+</span><span></span><span><span></span><span><span><span><span><span><span></span><span><span>p</span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>r</span><span>l</span><span><span>k</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span></span><span>⋅</span><span></span><span>s</span></span></span><span><span></span><span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span><span><span><span><span><span></span><span><span></span><span></span><span>=</span><span></span><span><span></span><span><span><span><span><span><span></span><span><span>p</span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>[</span><span>−</span><span>(</span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span><span></span><span>+</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span><span>p</span><span></span><span>⋅</span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span><span>p</span><span>⋅</span><span>q</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span>s</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span></span></span><span><span></span><span><span></span><span></span><span>=</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span><span><span></span><span><span><span><span><span><span></span><span><span>p</span></span></span><span><span></span><span></span></span><span><span></span><span><span>−</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span></span><span>+</span><span></span><span>q</span><span></span><span>⋅</span><span></span><span>K</span><span>,</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>where <span><span><span>K∈RK \\in R</span><span aria-hidden=\"true\"><span><span></span><span>K</span><span></span><span>∈</span><span></span></span><span><span></span><span>R</span></span></span></span></span> such that <span><span><span>[−(a′⋅s+e′)+p⋅s2]pq=−(a′⋅s+e′)+p⋅s2+pq⋅K[-(a'\\cdot s+e') + p\\cdot s^2]_{pq} = -(a'\\cdot s+e') + p\\cdot s^2 + pq\\cdot K</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>−</span><span>(</span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>p</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span><span>p</span><span>q</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>−</span><span>(</span><span><span>a</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span>s</span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span></span><span>+</span><span></span></span><span><span></span><span>p</span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>s</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>p</span><span>q</span><span></span><span>⋅</span><span></span></span><span><span></span><span>K</span></span></span></span></span>.</p>\n<p>We're cheating a bit here, since the pair involves the <em>roundings of the terms to their nearest integers</em>. Still, we're not far from the truth, since for any real number <span><span><span>aa</span><span aria-hidden=\"true\"><span><span></span><span>a</span></span></span></span></span>, <span><span><span>⌊a⌉\\lfloor a \\rceil</span><span aria-hidden=\"true\"><span><span></span><span>⌊</span><span>a</span><span>⌉</span></span></span></span></span> differs from <span><span><span>aa</span><span aria-hidden=\"true\"><span><span></span><span>a</span></span></span></span></span> by a small quantity\n<span><span><span>ε∈[−12,12]\\varepsilon \\in [-\\frac{1}{2},\\frac{1}{2}]</span><span aria-hidden=\"true\"><span><span></span><span>ε</span><span></span><span>∈</span><span></span></span><span><span></span><span>[</span><span>−</span><span><span></span><span><span><span><span><span><span></span><span><span><span>2</span></span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span>,</span><span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>2</span></span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span>]</span></span></span></span></span>. (we can also extend this coefficient-wise to polynomials).</p>\n<p>💡 We get a \"small\" <strong>relinearization noise</strong>,\n<span><span><span>erelin_v2≈(c2⋅e′)/pe_{\\text{relin\\_v2}} \\approx (c_2\\cdot e')/p</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v2</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>≈</span><span></span></span><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>2</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>⋅</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>)</span><span>/</span><span>p</span></span></span></span></span>, for large <span><span><span>p:p:</span><span aria-hidden=\"true\"><span><span></span><span>p</span><span></span><span>:</span></span></span></span></span>\n<span><span><span>∥erelin_v2∥≤q⋅B′⋅np+n+12.\\|e_{\\text{relin\\_v2}}\\| \\leq \\frac{q \\cdot B' \\cdot n}{p}+\\frac{n+1}{2}.</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v2</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>≤</span><span></span></span><span><span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>p</span></span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>q</span><span>⋅</span><span><span>B</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>⋅</span><span>n</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>2</span></span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>n</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span>.</span></span></span></span></span></p>\n<p>Next, we provide the easy <a href=\"https://github.com/bit-ml/he-scheme/blob/main/rlwe_he_scheme_updated.py#L355\">code</a> implementation for multiplying ciphertexts using this version.</p>\n<div><pre><code><span>def</span><span> </span><span>mul_cipher_v2</span><span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>p<span>,</span><span> </span>poly_mod<span>,</span><span> </span>rlk0<span>,</span><span> </span>rlk1<span>)</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>\"\"\"Multiply<span> </span>two<span> </span>ciphertexts.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Args:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct1:<span> </span>first<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>ct2:<span> </span>second<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>q:<span> </span>ciphertext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>t:<span> </span>plaintext<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>p:<span> </span>modulus-swithcing<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>poly_mod:<span> </span>polynomial<span> </span>modulus.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlk0,<span> </span>rlk1:<span> </span>output<span> </span>of<span> </span>the<span> </span>EvaluateKeygen_v2<span> </span>function.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>Returns:<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>Tuple<span> </span>representing<span> </span>a<span> </span>ciphertext.<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>\"\"\"</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_0<span>,</span><span> </span>c_1<span>,</span><span> </span>c_2<span> </span><span>=</span><span> </span>multiplication_coeffs<span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_20<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>polymul_wm<span>(</span>c_2<span>,</span><span> </span>rlk0<span>,</span><span> </span>poly_mod<span>)</span><span> </span><span>/</span><span> </span>p<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>c_21<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>np<span>.</span><span>round</span><span>(</span>polymul_wm<span>(</span>c_2<span>,</span><span> </span>rlk1<span>,</span><span> </span>poly_mod<span>)</span><span> </span><span>/</span><span> </span>p<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_c0<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>polyadd_wm<span>(</span>c_0<span>,</span><span> </span>c_20<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>new_c1<span> </span><span>=</span><span> </span>np<span>.</span>int64<span>(</span>polyadd_wm<span>(</span>c_1<span>,</span><span> </span>c_21<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span> </span><span>%</span><span> </span>q<span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>return</span><span> </span><span>(</span>new_c0<span>,</span><span> </span>new_c1<span>)</span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n<h3>Version 1 vs. Version 2 🥊</h3>\n<p>Recall that we can derive a fresh standard ciphertext that decrypts to\n<span><span><span>[mm′]t[mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> as <span><span><span>cmul=(c0+c20,c1+c21)c_{mul} =(c_0+c_{20}, c_1+c_{21})</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span></span></span></span></span>, since</p>\n<div><span><span><span>c0+c20+s⋅(c1+c21)=Δ⋅[mm′]t+vmult,c_0 + c_{20} + s\\cdot (c_1 + c_{21}) = \\Delta \\cdot [mm']_t + v_{mult},</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span>0</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>0</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span>s</span><span></span><span>⋅</span><span></span></span><span><span></span><span>(</span><span><span>c</span><span><span><span><span><span><span></span><span><span>1</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>2</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>)</span><span></span><span>=</span><span></span></span><span><span></span><span>Δ</span><span></span><span>⋅</span><span></span></span><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span><span>t</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span></span></span></span></span></div>\n<p>where <span><span><span>vmult=u3+erelinv_{mult} = u_3 + e_{\\text{relin}}</span><span aria-hidden=\"true\"><span><span></span><span><span>v</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span><span>t</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>=</span><span></span></span><span><span></span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> and <span><span><span>erelin∈{erelin_v1,erelin_v2}e_{\\text{relin}} \\in \\{e_{\\text{relin\\_v1}}, e_{\\text{relin\\_v2}}\\}</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span>∈</span><span></span></span><span><span></span><span>{</span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v1</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin_v2</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>}</span></span></span></span></span>.</p>\n<p>We need to make sure that <span><span><span>cmulc_{mul}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> decrypts <em>correctly</em> to <span><span><span>[mm′]t[mm']_t</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>m</span><span><span>m</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span><span>]</span><span><span><span><span><span><span></span><span><span>t</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>. For\nthis, it suffices to choose the parameters such that\n<span><span><span>∥u3∥+∥erelin∥≤Δ/2.\\|u_3\\| + \\|e_{\\text{relin}}\\| \\leq \\Delta/2.</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>+</span><span></span></span><span><span></span><span>∥</span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>≤</span><span></span></span><span><span></span><span>Δ</span><span>/</span><span>2</span><span>.</span></span></span></span></span></p>\n<p>Now that we have <strong>two</strong> versions of relinearization, which help us in\nderiving <span><span><span>cmulc_{mul}</span><span aria-hidden=\"true\"><span><span></span><span><span>c</span><span><span><span><span><span><span></span><span><span><span>m</span><span>u</span><span>l</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>, we may wonder which one we can use:</p>\n<table>\n<thead>\n<tr>\n<th>Relinearization</th>\n<th align=\"left\">Size of <span><span><span>rlkrlk</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span></span></span></span></span> (in bits)</th>\n<th>Bound of <span><span><span>ereline_{\\text{relin}}</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Version 1</strong></td>\n<td align=\"left\"><span><span><span>2(ℓ+1)⋅n⋅log⁡q2(\\ell+1)\\cdot n \\cdot \\log q</span><span aria-hidden=\"true\"><span><span></span><span>2</span><span>(</span><span>ℓ</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>n</span><span></span><span>⋅</span><span></span></span><span><span></span><span>lo<span>g</span></span><span></span><span>q</span></span></span></span></span></td>\n<td><span><span><span>(ℓ+1)⋅B⋅T⋅n/2(\\ell+1)\\cdot B \\cdot T \\cdot n/2</span><span aria-hidden=\"true\"><span><span></span><span>(</span><span>ℓ</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span><span>)</span><span></span><span>⋅</span><span></span></span><span><span></span><span>B</span><span></span><span>⋅</span><span></span></span><span><span></span><span>T</span><span></span><span>⋅</span><span></span></span><span><span></span><span>n</span><span>/</span><span>2</span></span></span></span></span></td>\n</tr>\n<tr>\n<td><strong>Version 2</strong></td>\n<td align=\"left\"><span><span><span>2n⋅log⁡pq2n \\cdot \\log pq</span><span aria-hidden=\"true\"><span><span></span><span>2</span><span>n</span><span></span><span>⋅</span><span></span></span><span><span></span><span>lo<span>g</span></span><span></span><span>p</span><span>q</span></span></span></span></span></td>\n<td><span><span><span>q⋅B′⋅np+n+12\\frac{q \\cdot B' \\cdot n}{p}+\\frac{n+1}{2}</span><span aria-hidden=\"true\"><span><span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>p</span></span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>q</span><span>⋅</span><span><span>B</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span><span>⋅</span><span>n</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span><span></span><span>+</span><span></span></span><span><span></span><span><span></span><span><span><span><span><span><span></span><span><span><span>2</span></span></span></span><span><span></span><span></span></span><span><span></span><span><span><span>n</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span><span></span></span></span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<p>➡️ <strong>size of <span><span><span>rlkrlk</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span></span></span></span></span>:</strong> <strong>Version 1</strong> gives a relinearization key as <span><span><span>ℓ+1\\ell+1</span><span aria-hidden=\"true\"><span><span></span><span>ℓ</span><span></span><span>+</span><span></span></span><span><span></span><span>1</span></span></span></span></span> pairs of polynomials in <span><span><span>Rq,R_q,</span><span aria-hidden=\"true\"><span><span></span><span><span>R</span><span><span><span><span><span><span></span><span><span>q</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>,</span></span></span></span></span> whereas <strong>Version 2</strong> gives just one such pair. Recall that <span><span><span>ℓ=⌊log⁡Tq⌋\\ell=\\lfloor \\log_T{q}\\rfloor</span><span aria-hidden=\"true\"><span><span></span><span>ℓ</span><span></span><span>=</span><span></span></span><span><span></span><span>⌊</span><span><span>lo<span>g</span></span><span><span><span><span><span><span></span><span><span>T</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span></span><span><span>q</span></span><span>⌋</span></span></span></span></span> and see that this decreases as long as the base <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span> increases.</p>\n<p>➡️ <strong>bound of <span><span><span>ereline_{\\text{relin}}</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span>:</strong> The upper bounds of <span><span><span>ereline_{\\text{relin}}</span><span aria-hidden=\"true\"><span><span></span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span></span></span></span></span> for both versions are according to <a href=\"https://eprint.iacr.org/2012/144.pdf\">[FV12], Lem.3</a>. We consider <span><span><span>BB</span><span aria-hidden=\"true\"><span><span></span><span>B</span></span></span></span></span> as a bound taken so that the error distribution <span><span><span>χ\\chi</span><span aria-hidden=\"true\"><span><span></span><span>χ</span></span></span></span></span> takes values in <span><span><span>[−B,B][-B,B]</span><span aria-hidden=\"true\"><span><span></span><span>[</span><span>−</span><span>B</span><span>,</span><span></span><span>B</span><span>]</span></span></span></span></span> with high probability. We similarly define <span><span><span>B′B'</span><span aria-hidden=\"true\"><span><span></span><span><span>B</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span> for the case of the error distribution <span><span><span>χ′\\chi'</span><span aria-hidden=\"true\"><span><span></span><span><span>χ</span><span><span><span><span><span><span></span><span><span><span>′</span></span></span></span></span></span></span></span></span></span></span></span></span>, used in <strong>Version 2</strong>. Notice that for <strong>Version 1</strong>, a larger <span><span><span>TT</span><span aria-hidden=\"true\"><span><span></span><span>T</span></span></span></span></span> leads to more noise (but smaller <span><span><span>rlkrlk</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span></span></span></span></span>), whereas in <strong>Version 2</strong>, a larger <span><span><span>pp</span><span aria-hidden=\"true\"><span><span></span><span>p</span></span></span></span></span> leads to smaller noise (but larger <span><span><span>rlkrlk</span><span aria-hidden=\"true\"><span><span></span><span>r</span><span>l</span><span>k</span></span></span></span></span>). For choosing the parameters in safe implementation, we refer the reader to <a href=\"https://eprint.iacr.org/2012/144.pdf\">[FV12] Sec. Realinearisation Version 2.</a></p>\n<h3>Setting the parameters</h3>\n<p>We set the parameters for our toy implementation just to make sure it always\ncorrectly decrypts at least one ciphertext multiplication. For that, we made\nsure that <span><span><span>∥u3∥+∥erelin∥&#x3C;Δ/2\\|u_3\\| + \\|e_{\\text{relin}}\\|&#x3C; \\Delta /2</span><span aria-hidden=\"true\"><span><span></span><span>∥</span><span><span>u</span><span><span><span><span><span><span></span><span><span>3</span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>+</span><span></span></span><span><span></span><span>∥</span><span><span>e</span><span><span><span><span><span><span></span><span><span><span><span>relin</span></span></span></span></span></span><span>​</span></span><span><span><span></span></span></span></span></span></span><span>∥</span><span></span><span>&#x3C;</span><span></span></span><span><span></span><span>Δ</span><span>/</span><span>2</span></span></span></span></span>. In practice, for the\ncurrent choice it seems that decryption always works for <span><span><span>33</span><span aria-hidden=\"true\"><span><span></span><span>3</span></span></span></span></span> ciphertext\nmultiplications when using V2 relinearization, for example. This is due to\nthe fact that the theoretical bounds are worst-case bounds. For the same\nparameters we can make hundreds of addition (in practice it seems that\ndecryption works even for <span><span><span>10001000</span><span aria-hidden=\"true\"><span><span></span><span>1</span><span>0</span><span>0</span><span>0</span></span></span></span></span> additions 😮). Ciphertext addition\nis almost for free in terms of noise growth! 💥 We invite you to play\naround with the parameters and the bounds and try to see how many\nmultiplications you can get (as they are the costly operations).</p>\n<h3>Let's play! 🎉</h3>\n<p>Now we can multiply ciphertexts, as we have implemented two versions of this:\n<span><span><span>mul_cipher_v1\\texttt{mul\\_cipher\\_v1}</span><span aria-hidden=\"true\"><span><span></span><span><span>mul_cipher_v1</span></span></span></span></span></span> and <span><span><span>mul_cipher_v2\\texttt{mul\\_cipher\\_v2}</span><span aria-hidden=\"true\"><span><span></span><span><span>mul_cipher_v2</span></span></span></span></span></span>, using\nrelinearization. We can further add ciphertexts by using\n<span><span><span>add_cipher\\texttt{add\\_cipher}</span><span aria-hidden=\"true\"><span><span></span><span><span>add_cipher</span></span></span></span></span></span>. So yay! we can finally perform computations on\nencrypted data.</p>\n<p><strong>Bonus:</strong> if you're curious, you can try computing more complex (polynomial)\noperations on encrypted data, such as <em>multiplying three ciphertexts</em>. Here\nwe only wanted to show how to perform one multiplication. For more levels of\nmultiplications, you should set the parameters as in\n<a href=\"https://eprint.iacr.org/2012/144.pdf\">[FV12, Thm1]</a> so that you decrypt\ncorrectly 😉.</p>\n<p><strong>Bonus2:</strong> you can also perform <em>plain operations</em>, such as adding or\nmultiplying plaintexts to ciphertexts, by using <span><span><span>add_plain\\texttt{add\\_plain}</span><span aria-hidden=\"true\"><span><span></span><span><span>add_plain</span></span></span></span></span></span> and\n<span><span><span>mul_plain,\\texttt{mul\\_plain},</span><span aria-hidden=\"true\"><span><span></span><span><span>mul_plain</span></span><span>,</span></span></span></span></span> (with a <em>reduced noise growth</em>) both from\n<a href=\"https://github.com/Bitdefender-Crypto-Team/he-scheme/blob/main/rlwe_he_scheme_updated.py\">here</a>.\nFor further details on how these work, you should check\n<a href=\"https://blog.openmined.org/build-an-homomorphic-encryption-scheme-from-scratch-with-python/#buildanhomomorphicencryptionscheme\">this</a>. 🤓</p>\n<p>So what are you waiting for? Go check it out!</p>\n<div><pre><code><span>import</span><span> </span>rlwe_he_scheme_updated<span> </span><span>as</span><span> </span>rlwe_updated<span></span>\n<span></span><span>import</span><span> </span>numpy<span> </span><span>as</span><span> </span>np<span></span>\n<span></span><span></span>\n<span></span><span>if</span><span> </span>__name__<span> </span><span>==</span><span> </span><span>'__main__'</span><span>:</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Scheme's<span> </span>parameters</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>polynomial<span> </span>modulus<span> </span>degree</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>n<span> </span><span>=</span><span> </span><span>2</span><span> </span><span>**</span><span> </span><span>2</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>ciphertext<span> </span>modulus</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>q<span> </span><span>=</span><span> </span><span>2</span><span> </span><span>**</span><span> </span><span>14</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>plaintext<span> </span>modulus</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>t<span> </span><span>=</span><span> </span><span>2</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>base<span> </span>for<span> </span>relin_v1</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>T<span> </span><span>=</span><span> </span><span>int</span><span>(</span>np<span>.</span>sqrt<span>(</span>q<span>)</span><span>)</span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#modulusswitching<span> </span>modulus</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>p<span> </span><span>=</span><span> </span>q<span> </span><span>**</span><span> </span><span>3</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>polynomial<span> </span>modulus</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>poly_mod<span> </span><span>=</span><span> </span>np<span>.</span>array<span>(</span><span>[</span><span>1</span><span>]</span><span> </span><span>+</span><span> </span><span>[</span><span>0</span><span>]</span><span> </span><span>*</span><span> </span><span>(</span>n<span> </span><span>-</span><span> </span><span>1</span><span>)</span><span> </span><span>+</span><span> </span><span>[</span><span>1</span><span>]</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#standard<span> </span>deviation<span> </span>for<span> </span>the<span> </span>error<span> </span>in<span> </span>the<span> </span>encryption</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>std1<span> </span><span>=</span><span> </span><span>1</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#standard<span> </span>deviation<span> </span>for<span> </span>the<span> </span>error<span> </span>in<span> </span>the<span> </span>evaluateKeyGen_v2</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>std2<span> </span><span>=</span><span> </span><span>1</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Keygen</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>pk<span>,</span><span> </span>sk<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>keygen<span>(</span>n<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#EvaluateKeygen_version1</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>rlk0_v1<span>,</span><span> </span>rlk1_v1<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>evaluate_keygen_v1<span>(</span>sk<span>,</span><span> </span>n<span>,</span><span> </span>q<span>,</span><span> </span>T<span>,</span><span> </span>poly_mod<span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#EvaluateKeygen_version2</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>rlk0_v2<span>,</span><span> </span>rlk1_v2<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>evaluate_keygen_v2<span>(</span>sk<span>,</span><span> </span>n<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>,</span><span> </span>p<span>,</span><span> </span>std2<span>)</span><span></span>\n<span></span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Encryption</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>pt1<span>,</span><span> </span>pt2<span> </span><span>=</span><span> </span><span>[</span><span>1</span><span>,</span><span> </span><span>0</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>1</span><span>]</span><span>,</span><span> </span><span>[</span><span>1</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>0</span><span>,</span><span> </span><span>1</span><span>]</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>cst1<span>,</span><span> </span>cst2<span> </span><span>=</span><span> </span><span>[</span><span>0</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>0</span><span>]</span><span>,</span><span> </span><span>[</span><span>0</span><span>,</span><span> </span><span>1</span><span>,</span><span> </span><span>0</span><span>,</span><span> </span><span>0</span><span>]</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct1<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>encrypt<span>(</span>pk<span>,</span><span> </span>n<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>pt1<span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct2<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>encrypt<span>(</span>pk<span>,</span><span> </span>n<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>pt2<span>,</span><span> </span>std1<span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Ciphertext<span> </span>ct1({}):\"</span><span>.</span><span>format</span><span>(</span>pt1<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\"</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\\t<span> </span>ct1_0:\"</span><span>,</span><span> </span>ct1<span>[</span><span>0</span><span>]</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\\t<span> </span>ct1_1:\"</span><span>,</span><span> </span>ct1<span>[</span><span>1</span><span>]</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\"</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Ciphertext<span> </span>ct2({}):\"</span><span>.</span><span>format</span><span>(</span>pt2<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\"</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\\t<span> </span>ct1_0:\"</span><span>,</span><span> </span>ct2<span>[</span><span>0</span><span>]</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\\t<span> </span>ct1_1:\"</span><span>,</span><span> </span>ct2<span>[</span><span>1</span><span>]</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"\"</span><span>)</span><span></span>\n<span></span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Evaluation</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct3<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>add_plain<span>(</span>ct1<span>,</span><span> </span>cst1<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct4<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>mul_plain<span>(</span>ct2<span>,</span><span> </span>cst2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#ct5<span> </span>=<span> </span>(ct1<span> </span>+<span> </span>cst1)<span> </span>+<span> </span>(cst2<span> </span>*<span> </span>ct2)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct5<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>add_cipher<span>(</span>ct3<span>,</span><span> </span>ct4<span>,</span><span> </span>q<span>,</span><span> </span>poly_mod<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>ct6<span> </span>=<span> </span>ct1<span> </span>*<span> </span>ct2</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct6<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>mul_cipher_v1<span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>T<span>,</span><span> </span>poly_mod<span>,</span><span> </span>rlk0_v1<span>,</span><span> </span>rlk1_v1<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>ct7<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>mul_cipher_v2<span>(</span>ct1<span>,</span><span> </span>ct2<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>p<span>,</span><span> </span>poly_mod<span>,</span><span> </span>rlk0_v2<span>,</span><span> </span>rlk1_v2<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>#<span> </span>Decryption</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>decrypted_ct3<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>decrypt<span>(</span>sk<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>ct3<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>decrypted_ct4<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>decrypt<span>(</span>sk<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>ct4<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>decrypted_ct5<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>decrypt<span>(</span>sk<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>ct5<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>decrypted_ct6<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>decrypt<span>(</span>sk<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>ct6<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span>decrypted_ct7<span> </span><span>=</span><span> </span>rlwe_updated<span>.</span>decrypt<span>(</span>sk<span>,</span><span> </span>q<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>,</span><span> </span>ct7<span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Decrypted<span> </span>ct3=(ct1<span> </span>+<span> </span>{}):<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>cst1<span>,</span><span> </span>decrypted_ct3<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Decrypted<span> </span>ct4=(ct2<span> </span>*<span> </span>{}):<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>cst2<span>,</span><span> </span>decrypted_ct4<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Decrypted<span> </span>ct5=(ct1<span> </span>+<span> </span>{}<span> </span>+<span> </span>{}<span> </span>*<span> </span>ct2):<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>cst1<span>,</span><span> </span>cst2<span>,</span><span> </span>decrypted_ct5<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>pt1<span> </span>+<span> </span>{}<span> </span>+<span> </span>{}<span> </span>*<span> </span>pt2):<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>cst1<span>,</span><span> </span>cst2<span>,</span><span> </span>rlwe_updated<span>.</span>polyadd<span>(</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlwe_updated<span>.</span>polyadd<span>(</span>pt1<span>,</span><span> </span>cst1<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>rlwe_updated<span>.</span>polymul<span>(</span>cst2<span>,</span><span> </span>pt2<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span>,</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Decrypted<span> </span>ct6=(ct1<span> </span>*<span> </span>ct2):<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>decrypted_ct6<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>Decrypted<span> </span>ct7=(ct1<span> </span>*<span> </span>ct2):<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>decrypted_ct7<span>)</span><span>)</span><span></span>\n<span></span><span> </span><span> </span><span> </span><span> </span><span>print</span><span>(</span><span>\"[+]<span> </span>pt1<span> </span>*<span> </span>pt2:<span> </span>{}\"</span><span>.</span><span>format</span><span>(</span>rlwe_updated<span>.</span>polymul<span>(</span>pt1<span>,</span><span> </span>pt2<span>,</span><span> </span>t<span>,</span><span> </span>poly_mod<span>)</span><span>)</span><span>)</span><span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span>\n</code></pre></div>\n"}}}
